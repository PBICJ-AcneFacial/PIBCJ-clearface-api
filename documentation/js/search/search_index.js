var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.125,1,1.659]],["body/modules/AppModule.html",[0,1.785,1,3.228,2,1.355,3,1.355,4,1.764,5,1.764,6,1.355,7,2.632,8,1.764,9,2.417,10,2.417,11,2.417,12,2.622,13,0.048,14,2.622,15,2.035,16,2.035,17,2.344,18,1.764,19,1.541,20,0.543,21,0.463,22,0.463,23,2.985,24,3.212,25,1.545,26,0.822,27,2.985,28,2.985,29,2.985,30,2.985,31,2.043,32,0.543,33,0.32,34,0.034,35,0.034]],["title/modules/AuthModule.html",[0,1.125,12,1.449]],["body/modules/AuthModule.html",[0,1.766,2,1.327,3,1.327,4,1.727,5,1.727,6,1.327,7,2.604,8,1.727,12,2.705,13,0.049,17,2.311,18,1.727,19,1.509,20,0.531,21,0.454,22,0.454,24,2.367,25,1.579,26,0.805,32,0.531,33,0.313,34,0.033,35,0.033,36,2.367,37,2.367,38,1.737,39,2.532,40,2.923,41,2.367,42,1.727,43,1.509,44,3.167,45,1.509,46,2.677,47,2.001,48,2.923,49,2.923,50,2.923,51,2.923,52,2.923,53,2.923,54,2.367,55,0.805,56,2.367,57,1.171,58,2.367,59,2.923,60,2.923,61,2.923,62,2.923]],["title/injectables/AuthService.html",[38,0.994,63,0.773]],["body/injectables/AuthService.html",[13,0.048,20,0.505,21,0.431,22,0.431,25,1.182,26,0.765,32,0.505,33,0.298,34,0.032,35,0.032,38,1.338,42,2.939,43,1.434,55,0.765,63,1.041,64,1.434,65,1.902,66,0.765,67,1.951,68,2.258,69,3.779,70,3.779,71,1.261,72,2.778,73,1.521,74,2.778,75,1.521,76,1.441,77,0.904,78,1.521,79,2.778,80,1.338,81,2.778,82,1.951,83,3.733,84,3.06,85,2.778,86,2.587,87,1.261,88,2.25,89,1.642,90,2.25,91,1.642,92,2.587,93,2.25,94,2.233,95,2.25,96,2.25,97,1.902,98,1.902,99,2.25,100,2.25,101,1.902,102,1.902,103,1.642,104,1.902,105,1.902]],["title/interfaces/EmailType.html",[87,1.275,106,1.449]],["body/interfaces/EmailType.html",[13,0.046,20,0.654,21,0.558,22,0.558,32,0.654,34,0.038,35,0.038,55,0.99,57,1.441,66,0.99,77,1.024,87,2.03,106,2.308,107,2.461,108,2.912,109,1.441,110,2.125,111,3.595,112,3.595,113,3.595,114,2.642,115,4.865,116,4.122,117,2.191,118,3.595]],["title/classes/EntityAlreadyExistsError.html",[33,0.301,119,1.449]],["body/classes/EntityAlreadyExistsError.html",[13,0.047,20,0.471,21,0.402,22,0.402,32,0.471,33,0.277,34,0.031,35,0.031,55,1.295,57,1.038,71,1.176,73,0.917,75,0.917,76,0.81,77,0.545,78,0.917,80,1.275,109,1.443,117,1.951,119,1.859,120,1.531,121,2.098,122,2.098,123,2.917,124,2.098,125,2.098,126,2.098,127,2.098,128,2.591,129,3.943,130,2.098,131,2.098,132,2.098,133,2.098,134,2.591,135,2.591,136,2.834,137,1.773,138,2.591,139,2.591,140,2.098,141,1.859,142,2.128,143,2.917,144,3.22,145,2.591,146,2.917,147,2.917,148,3.602,149,3.353,150,3.353,151,2.465,152,3.624,153,3.602,154,3.602,155,2.465,156,4.475,157,3.602,158,3.602,159,3.602,160,3.602,161,3.602,162,3.602,163,3.353,164,3.353,165,2.917,166,2.098]],["title/classes/EntityDoesNotExists.html",[33,0.301,167,1.449]],["body/classes/EntityDoesNotExists.html",[13,0.047,20,0.491,21,0.419,22,0.419,32,0.491,33,0.289,34,0.032,35,0.032,55,1.358,57,1.081,71,1.225,73,0.955,75,0.955,76,0.844,77,0.568,78,0.955,109,1.484,117,1.976,120,1.594,122,2.185,123,3,124,2.185,125,2.185,126,2.185,127,2.185,129,3.993,130,2.185,131,2.185,132,2.185,136,2.896,137,2.536,140,2.185,141,1.912,142,2.189,143,3,144,3.267,146,3,147,3,150,3.426,151,2.536,152,3,165,3,166,2.185,167,2.464,168,2.185,169,2.698,170,2.698,171,3.426,172,4.231,173,2.698,174,3.705,175,3.705,176,3,177,3.705,178,3.705,179,3.705,180,3.705,181,3.705,182,2.698,183,2.185]],["title/injectables/JwtStrategy.html",[39,1.449,63,0.773]],["body/injectables/JwtStrategy.html",[13,0.048,20,0.553,21,0.472,22,0.472,25,1.405,26,0.837,32,0.553,33,0.325,34,0.034,35,0.034,39,2.072,45,1.568,54,2.461,55,0.837,56,2.461,57,1.218,58,2.461,63,1.105,64,1.568,66,0.837,67,2.072,68,2.04,71,2.04,73,1.421,75,1.076,76,0.95,77,0.64,78,1.076,82,1.568,86,2.08,92,2.08,94,1.796,103,1.796,104,2.08,105,2.08,141,2.072,184,2.461,185,4.013,186,4.013,187,3.038,188,4.013,189,3.038,190,2.461,191,3.038,192,3.038,193,3.038,194,2.461,195,2.461,196,3.038,197,3.038,198,3.038,199,3.038,200,3.038,201,3.038,202,3.038,203,3.038]],["title/injectables/PrismaService.html",[15,1.125,63,0.773]],["body/injectables/PrismaService.html",[13,0.047,15,1.777,20,0.646,21,0.551,22,0.551,25,1.387,26,0.978,32,0.646,33,0.38,34,0.038,35,0.038,63,1.222,64,1.833,66,0.978,67,2.289,68,2.196,73,1.257,82,1.833,141,2.289,204,2.875,205,4.837,206,5.319,207,3.55,208,2.43,209,3.55,210,2.43,211,3.55]],["title/controllers/UserController.html",[212,1.659,213,1.659]],["body/controllers/UserController.html",[13,0.049,16,0.789,20,0.215,21,0.183,22,0.183,25,1.279,26,0.326,31,0.809,32,0.215,33,0.127,34,0.017,35,0.017,38,0.897,45,0.61,66,0.326,67,1.017,68,2.118,73,1.162,75,1.162,76,1.232,77,0.691,78,1.162,80,0.698,82,1.695,89,0.698,91,2.494,109,0.789,110,2.494,119,1.017,142,1.94,151,0.809,155,0.809,163,0.957,164,0.957,167,1.695,210,2.427,212,0.698,213,1.164,214,0.957,215,1.182,216,0.957,217,1.97,218,1.595,219,1.595,220,1.595,221,1.595,222,1.182,223,3.545,224,4.963,225,4.834,226,3.283,227,1.182,228,1.182,229,2.955,230,1.182,231,1.182,232,1.182,233,3.76,234,1.182,235,1.182,236,1.182,237,1.182,238,1.182,239,1.182,240,1.182,241,1.182,242,1.182,243,1.182,244,1.182,245,1.182,246,0.957,247,1.182,248,0.957,249,0.957,250,1.307,251,0.957,252,0.957,253,0.957,254,0.957,255,1.182,256,1.182,257,1.182,258,1.182,259,1.182,260,3.045,261,2.393,262,2.533,263,2.533,264,2.533,265,2.051,266,2.533,267,2.533,268,1.734,269,2.955,270,2.955,271,2.955,272,2.533,273,2.955,274,1.182,275,0.957,276,1.182,277,3.283,278,1.182,279,1.182,280,3.283,281,4.432,282,3.76,283,1.182,284,3.509,285,3.283,286,3.283,287,3.283,288,2.658,289,1.182,290,1.182,291,1.182,292,1.182,293,3.283,294,1.182,295,1.182,296,1.182,297,1.182,298,1.182,299,1.97,300,1.182,301,1.182,302,2.533,303,1.182,304,1.182,305,1.182,306,1.182,307,0.957,308,2.533,309,1.182,310,1.97,311,1.182,312,1.182,313,1.182,314,1.595,315,2.051,316,2.051,317,1.595,318,1.182,319,1.182,320,1.182,321,1.182,322,1.182,323,1.97,324,1.182]],["title/modules/UserModule.html",[0,1.125,14,1.449]],["body/modules/UserModule.html",[0,1.769,2,1.331,3,1.331,4,1.733,5,1.733,6,1.331,7,2.609,8,1.733,13,0.048,14,2.769,15,1.968,16,1.968,17,2.316,18,1.733,19,1.514,20,0.533,21,0.455,22,0.455,25,1.64,26,0.808,31,2.683,32,0.533,33,0.314,34,0.034,35,0.034,38,1.739,41,2.375,42,1.733,43,1.514,44,2.375,45,1.514,46,2.008,47,2.008,213,2.609,246,2.375,254,2.375,325,2.933,326,2.933,327,2.933,328,2.375,329,2.933,330,2.933]],["title/injectables/UserService.html",[16,1.125,63,0.773]],["body/injectables/UserService.html",[13,0.049,15,1.106,16,0.873,20,0.243,21,0.207,22,0.207,25,1.437,26,0.368,32,0.243,33,0.143,34,0.019,35,0.019,47,0.914,55,1.036,57,0.873,63,0.6,64,0.689,66,0.368,67,1.125,68,2.184,71,0.606,73,1.332,75,1.332,76,1.176,77,0.792,78,1.332,80,1.242,82,1.81,89,0.789,91,2.805,94,1.881,97,0.914,101,0.914,103,1.287,106,0.689,110,2.601,116,1.081,117,1.902,119,0.689,133,1.081,136,0.914,155,2.179,167,0.689,171,1.081,190,2.578,208,0.914,210,2.93,218,1.764,219,1.764,220,1.764,221,1.764,249,1.081,250,0.689,251,1.081,253,1.081,260,2.578,268,2.179,314,1.081,315,1.764,316,1.764,328,1.081,331,1.081,332,2.178,333,1.335,334,1.335,335,1.764,336,1.335,337,2.178,338,1.335,339,2.759,340,1.335,341,1.335,342,1.335,343,1.335,344,1.335,345,1.335,346,1.335,347,1.335,348,1.335,349,1.335,350,1.081,351,1.764,352,0.914,353,1.335,354,1.491,355,1.335,356,0.914,357,1.335,358,1.335,359,1.335,360,1.335,361,1.335,362,3.507,363,1.335,364,1.335,365,3.967,366,3.213,367,1.335,368,1.335,369,1.335,370,1.335,371,1.335,372,1.335,373,1.335,374,1.335,375,1.335,376,3.183,377,1.335,378,2.759,379,1.335,380,1.335,381,1.335,382,1.335,383,3.183,384,1.335,385,1.335,386,2.759,387,2.759,388,2.759,389,1.335,390,1.335,391,1.335,392,2.178,393,1.335,394,1.335,395,1.335,396,1.335,397,1.335,398,1.335,399,2.759,400,1.335,401,1.335,402,1.335,403,1.335,404,1.335,405,1.335,406,1.335,407,1.335,408,1.335,409,1.335,410,1.335,411,2.178,412,1.335,413,1.335,414,1.335,415,1.335,416,1.335,417,1.335,418,1.335,419,1.335,420,1.335,421,2.759,422,1.335,423,1.335,424,1.335,425,1.335,426,1.335,427,1.335,428,1.491,429,0.914,430,1.335,431,1.764,432,1.335,433,1.335,434,1.335,435,1.081,436,1.335,437,1.335,438,1.335,439,1.335,440,1.335,441,1.335,442,1.335,443,1.335,444,1.335,445,1.335,446,1.335]],["title/classes/ValidationError.html",[33,0.301,250,1.449]],["body/classes/ValidationError.html",[13,0.047,20,0.677,21,0.578,22,0.578,32,0.677,33,0.399,34,0.039,35,0.039,71,1.69,73,1.318,75,1.318,76,1.164,77,0.784,78,1.318,117,1.98,120,2.2,141,2.358,142,2.699,183,3.014,250,2.551,284,3.014,447,3.014,448,4.567,449,3.722,450,3.722]],["title/coverage.html",[451,2.606]],["body/coverage.html",[6,1.27,13,0.048,15,1.121,16,1.121,22,0.434,33,0.462,34,0.032,35,0.032,38,0.99,39,1.444,63,1.273,65,2.599,77,0.589,80,0.99,87,1.724,106,1.444,108,2.265,119,1.444,121,2.265,167,1.444,168,2.265,184,2.265,204,2.265,212,1.653,213,1.653,214,2.265,250,1.444,331,2.265,352,1.914,354,1.914,356,1.914,366,2.265,447,2.265,451,1.914,452,2.265,453,2.797,454,2.797,455,2.265,456,4.623,457,5.442,458,4.984,459,2.797,460,3.796,461,2.797,462,2.797,463,4.31,464,3.796,465,3.796,466,2.265,467,4.31,468,2.95,469,2.797,470,2.265,471,2.265,472,2.265,473,2.265,474,2.797,475,2.797,476,2.797,477,2.797]],["title/dependencies.html",[3,1.53,478,1.909]],["body/dependencies.html",[3,1.553,13,0.049,26,0.942,34,0.037,35,0.037,43,1.766,45,1.766,194,3.509,195,2.77,208,2.341,248,2.77,252,2.77,335,2.77,350,2.77,479,4.755,480,3.42,481,3.42,482,3.42,483,3.42,484,4.333,485,3.42,486,3.42,487,3.42,488,3.42,489,3.42,490,3.42,491,3.42,492,3.42,493,3.42,494,3.42,495,3.42,496,3.42,497,3.42,498,3.42,499,3.42,500,3.42,501,3.42]],["title/miscellaneous/functions.html",[502,1.393,503,2.729]],["body/miscellaneous/functions.html",[6,2.151,13,0.043,34,0.037,35,0.037,55,0.934,66,0.934,75,1.526,76,1.348,77,0.907,78,1.526,106,2.225,109,1.36,110,2.005,117,1.727,265,2.748,352,2.951,354,3.243,356,2.951,428,3.243,429,3.243,455,2.748,468,2.322,472,2.748,473,2.748,502,2.005,503,2.748,504,3.393,505,3.393,506,2.748,507,3.393,508,3.393,509,3.393,510,3.393,511,3.393,512,3.393,513,3.393,514,3.393,515,3.393,516,2.748,517,3.393,518,3.393,519,3.393]],["title/index.html",[66,0.649,520,2.357,521,2.357]],["body/index.html",[13,0.045,19,2.281,21,0.303,34,0.025,35,0.025,109,0.783,149,3.177,288,1.583,307,1.583,451,1.338,452,2.378,522,1.954,523,1.954,524,3.529,525,2.937,526,1.954,527,1.954,528,1.954,529,2.937,530,3.529,531,1.954,532,1.954,533,1.954,534,3.924,535,1.954,536,4.716,537,1.954,538,4.583,539,1.954,540,1.954,541,1.954,542,2.937,543,1.954,544,2.937,545,1.954,546,3.529,547,1.954,548,2.937,549,1.954,550,1.954,551,1.954,552,1.954,553,1.954,554,3.924,555,4.716,556,4.418,557,1.954,558,2.937,559,1.954,560,1.954,561,1.954,562,1.954,563,1.954,564,4.418,565,2.937,566,3.924,567,1.954,568,2.937,569,1.954,570,1.954,571,2.937,572,4.418,573,3.924,574,1.954,575,2.937,576,1.954,577,1.954,578,1.954,579,1.954,580,3.924,581,1.954,582,1.954,583,1.954,584,1.954,585,2.937,586,1.954,587,1.954,588,1.954,589,1.954,590,1.954,591,2.937,592,1.954,593,1.954,594,1.954,595,2.937,596,1.954,597,1.954,598,3.177,599,2.937,600,1.954,601,1.954,602,1.954,603,1.954,604,1.954,605,1.954,606,1.954,607,1.954,608,2.937,609,1.954,610,1.954,611,1.954,612,1.954,613,3.529,614,1.954,615,1.954,616,1.954,617,1.954,618,1.954,619,1.954,620,2.937,621,1.954,622,1.954,623,1.954,624,1.954,625,1.954,626,2.937,627,1.954,628,1.954,629,1.954,630,2.937,631,2.937,632,1.954,633,1.954,634,1.954,635,1.954,636,1.954,637,1.954,638,1.954,639,1.954,640,1.954,641,1.954,642,1.583,643,1.954,644,1.954,645,1.954,646,1.954,647,1.954,648,1.954,649,1.583]],["title/modules.html",[2,1.728]],["body/modules.html",[1,2.401,2,1.845,12,2.097,13,0.041,14,2.097,34,0.041,35,0.041,598,4.155,650,5.132,651,5.132,652,5.132]],["title/overview.html",[653,3.083]],["body/overview.html",[0,1.258,1,3.209,2,1.426,3,1.426,4,1.856,5,1.856,6,1.426,7,1.856,8,1.856,9,2.543,10,2.543,11,2.543,12,2.709,13,0.047,14,2.778,15,1.94,16,1.94,17,2.423,18,1.856,19,1.621,34,0.035,35,0.035,36,2.543,37,2.543,38,1.714,39,2.357,64,1.621,107,2.15,120,1.856,212,1.856,275,3.321,653,2.543,654,3.14,655,3.14,656,3.14]],["title/properties.html",[114,1.991,478,1.909]],["body/properties.html",[13,0.047,34,0.042,35,0.042,109,1.668,114,2.46,642,3.371,649,3.371,657,4.163,658,4.163,659,4.163]],["title/interfaces/user.html",[80,0.994,87,1.275]],["body/interfaces/user.html",[13,0.048,20,0.563,21,0.48,22,0.48,25,1.27,26,0.852,32,0.563,33,0.331,34,0.035,35,0.035,38,1.096,42,2.679,43,1.597,55,0.852,63,1.119,65,2.118,66,0.852,68,1.844,76,1.505,77,0.855,80,1.096,83,3.289,84,2.506,86,2.118,87,1.405,88,2.506,89,1.828,90,2.506,91,1.828,92,2.78,93,2.506,94,2.4,95,2.506,96,2.506,97,2.118,98,2.118,99,2.506,100,2.506,101,2.118,102,2.118,103,2.845,104,2.118,105,2.118,107,2.118,114,2.4,117,1.929]],["title/miscellaneous/variables.html",[502,1.393,660,2.729]],["body/miscellaneous/variables.html",[13,0.048,34,0.033,35,0.033,46,1.966,55,0.791,57,1.873,66,0.791,77,0.605,80,1.017,98,1.966,102,1.966,137,2.646,144,2.991,176,2.326,216,2.326,261,2.326,268,2.646,317,3.538,351,3.131,428,2.646,429,1.966,431,2.326,435,2.326,466,2.326,468,1.966,470,3.131,471,3.131,502,1.698,506,3.131,516,3.131,660,2.326,661,2.873,662,2.873,663,4.369,664,2.873,665,2.873,666,3.866,667,2.873,668,2.873,669,2.873,670,2.873,671,2.873,672,2.873,673,2.873,674,3.866,675,2.873,676,3.866,677,2.873,678,2.873,679,2.873,680,2.873,681,2.873,682,2.873,683,2.873,684,2.873,685,2.873,686,2.873,687,3.866,688,4.369,689,2.873,690,2.873,691,2.873,692,2.873,693,2.873,694,2.873,695,2.873,696,2.873]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":658,"title":{},"body":{"properties.html":{}}}],["0.2.0",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":654,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["16.4.7",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":61,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":656,"title":{},"body":{"overview.html":{}}}],["2/2",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":275,"title":{},"body":{"controllers/UserController.html":{},"overview.html":{}}}],["3.0.0",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["3.24.2",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":655,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["465",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["587",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":272,"title":{},"body":{"controllers/UserController.html":{}}}],["6.10.0",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["_data:prisma.usercreateinput",{"_index":372,"title":{},"body":{"injectables/UserService.html":{}}}],["_email:emailtype",{"_index":407,"title":{},"body":{"injectables/UserService.html":{}}}],["_password",{"_index":369,"title":{},"body":{"injectables/UserService.html":{}}}],["abaixo",{"_index":422,"title":{},"body":{"injectables/UserService.html":{}}}],["admin_email",{"_index":351,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["admin_password",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowing",{"_index":586,"title":{},"body":{"index.html":{}}}],["already",{"_index":163,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{}}}],["alterado",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alteração",{"_index":425,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":636,"title":{},"body":{"index.html":{}}}],["ambiente",{"_index":56,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["ao",{"_index":160,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["app",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":556,"title":{},"body":{"index.html":{}}}],["applications",{"_index":529,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["aqui",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["associado",{"_index":159,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["assunto",{"_index":412,"title":{},"body":{"injectables/UserService.html":{}}}],["async",{"_index":68,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["atenciosamente",{"_index":436,"title":{},"body":{"injectables/UserService.html":{}}}],["atualizando",{"_index":400,"title":{},"body":{"injectables/UserService.html":{}}}],["auth",{"_index":216,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["auth.service",{"_index":48,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.service",{"_index":254,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["auth:config.auth",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":255,"title":{},"body":{"controllers/UserController.html":{}}}],["authmodule",{"_index":12,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":642,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":38,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"interfaces/user.html":{}}}],["authservice,jwtstrategy,jwtservice",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{}}}],["autorizadas",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":210,"title":{},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":575,"title":{},"body":{"index.html":{}}}],["backers",{"_index":637,"title":{},"body":{"index.html":{}}}],["based",{"_index":570,"title":{},"body":{"index.html":{}}}],["bcryptjs",{"_index":350,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["board",{"_index":629,"title":{},"body":{"index.html":{}}}],["body",{"_index":233,"title":{},"body":{"controllers/UserController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["breve",{"_index":432,"title":{},"body":{"injectables/UserService.html":{}}}],["browse",{"_index":652,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":650,"title":{},"body":{"modules.html":{}}}],["building",{"_index":525,"title":{},"body":{"index.html":{}}}],["campo",{"_index":157,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["caracteres",{"_index":273,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":280,"title":{},"body":{"controllers/UserController.html":{}}}],["channel",{"_index":601,"title":{},"body":{"index.html":{}}}],["check",{"_index":564,"title":{},"body":{"index.html":{}}}],["class",{"_index":33,"title":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"classes/ValidationError.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["classe",{"_index":122,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["classes",{"_index":120,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"classes/ValidationError.html":{},"overview.html":{}}}],["clicks",{"_index":585,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":569,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":36,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":37,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":325,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":326,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":399,"title":{},"body":{"injectables/UserService.html":{}}}],["code}`//retornando",{"_index":444,"title":{},"body":{"injectables/UserService.html":{}}}],["codigo",{"_index":446,"title":{},"body":{"injectables/UserService.html":{}}}],["com",{"_index":126,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["come",{"_index":592,"title":{},"body":{"index.html":{}}}],["compare",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password,user.password",{"_index":390,"title":{},"body":{"injectables/UserService.html":{}}}],["config",{"_index":470,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configurações",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["console.log(a",{"_index":443,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(token",{"_index":295,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["constructor",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{}}}],["constructor(entityname",{"_index":143,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["constructor(jwtservice",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(message",{"_index":448,"title":{},"body":{"classes/ValidationError.html":{}}}],["constructor(prisma",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["contato",{"_index":441,"title":{},"body":{"injectables/UserService.html":{}}}],["contendo",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["continuar",{"_index":419,"title":{},"body":{"injectables/UserService.html":{}}}],["controller",{"_index":212,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('auth",{"_index":256,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["conversão",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["courses",{"_index":607,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":451,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["create(data",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["create(data:prisma.usercreateinput",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["created_at:true",{"_index":381,"title":{},"body":{"injectables/UserService.html":{}}}],["createtransport",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cria",{"_index":146,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["criar",{"_index":135,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["código",{"_index":421,"title":{},"body":{"injectables/UserService.html":{}}}],["da",{"_index":152,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["data",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["data.email",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["de",{"_index":55,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":226,"title":{},"body":{"controllers/UserController.html":{}}}],["deeper",{"_index":603,"title":{},"body":{"index.html":{}}}],["default",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["define",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":554,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":574,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":565,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":584,"title":{},"body":{"index.html":{}}}],["description",{"_index":109,"title":{},"body":{"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["deve",{"_index":269,"title":{},"body":{"controllers/UserController.html":{}}}],["development",{"_index":539,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":615,"title":{},"body":{"index.html":{}}}],["discord",{"_index":600,"title":{},"body":{"index.html":{}}}],["dive",{"_index":602,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":452,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doestheuseralreadyexist",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["dotenv",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["duplicidade",{"_index":128,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["dúvidas",{"_index":439,"title":{},"body":{"injectables/UserService.html":{}}}],["e",{"_index":428,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":549,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":526,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":562,"title":{},"body":{"index.html":{}}}],["em",{"_index":431,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":110,"title":{},"body":{"interfaces/EmailType.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["email,name,password,appointments,created_at",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["email,name,password:_password,appointments,created_at",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["email,valcode",{"_index":395,"title":{},"body":{"injectables/UserService.html":{}}}],["email:email",{"_index":403,"title":{},"body":{"injectables/UserService.html":{}}}],["email:true",{"_index":379,"title":{},"body":{"injectables/UserService.html":{}}}],["email@email.com",{"_index":162,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["emails",{"_index":113,"title":{},"body":{"interfaces/EmailType.html":{}}}],["emailtype",{"_index":106,"title":{"interfaces/EmailType.html":{}},"body":{"interfaces/EmailType.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encontrada",{"_index":172,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["ensure",{"_index":560,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":619,"title":{},"body":{"index.html":{}}}],["entidade",{"_index":129,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["entity",{"_index":161,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["entityalreadyexistserror",{"_index":119,"title":{"classes/EntityAlreadyExistsError.html":{}},"body":{"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entityalreadyexistserror('user',data.email",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["entityalreadyexistsexception",{"_index":148,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["entitydoesnotexists",{"_index":167,"title":{"classes/EntityDoesNotExists.html":{}},"body":{"classes/EntityDoesNotExists.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entitydoesnotexists('user',email",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["entitydoesnotexists('user',id",{"_index":384,"title":{},"body":{"injectables/UserService.html":{}}}],["entityname",{"_index":150,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["entre",{"_index":440,"title":{},"body":{"injectables/UserService.html":{}}}],["envia",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enviado",{"_index":517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enviar",{"_index":112,"title":{},"body":{"interfaces/EmailType.html":{}}}],["equipe",{"_index":437,"title":{},"body":{"injectables/UserService.html":{}}}],["err",{"_index":281,"title":{},"body":{"controllers/UserController.html":{}}}],["err.message",{"_index":285,"title":{},"body":{"controllers/UserController.html":{}}}],["erro",{"_index":156,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["error",{"_index":142,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/UserController.html":{},"classes/ValidationError.html":{}}}],["erros",{"_index":127,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["específico",{"_index":158,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["esperada",{"_index":170,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["essa",{"_index":424,"title":{},"body":{"injectables/UserService.html":{}}}],["esta",{"_index":130,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["este",{"_index":427,"title":{},"body":{"injectables/UserService.html":{}}}],["example",{"_index":149,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"index.html":{}}}],["exceção",{"_index":123,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["exist",{"_index":182,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["existe",{"_index":139,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["exists",{"_index":164,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{}}}],["experience",{"_index":605,"title":{},"body":{"index.html":{}}}],["expirar",{"_index":430,"title":{},"body":{"injectables/UserService.html":{}}}],["expiresin",{"_index":60,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"interfaces/user.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":252,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["extends",{"_index":141,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/ValidationError.html":{}}}],["extractjwt",{"_index":192,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":198,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":200,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fast",{"_index":578,"title":{},"body":{"index.html":{}}}],["favor",{"_index":263,"title":{},"body":{"controllers/UserController.html":{}}}],["features",{"_index":588,"title":{},"body":{"index.html":{}}}],["few",{"_index":580,"title":{},"body":{"index.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["focus",{"_index":587,"title":{},"body":{"index.html":{}}}],["foi",{"_index":174,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["follow",{"_index":623,"title":{},"body":{"index.html":{}}}],["formato",{"_index":445,"title":{},"body":{"injectables/UserService.html":{}}}],["framework",{"_index":524,"title":{},"body":{"index.html":{}}}],["full",{"_index":618,"title":{},"body":{"index.html":{}}}],["funcking",{"_index":306,"title":{},"body":{"controllers/UserController.html":{}}}],["function",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":503,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":583,"title":{},"body":{"index.html":{}}}],["generate",{"_index":305,"title":{},"body":{"controllers/UserController.html":{}}}],["generatetoken",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(undefined",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken({id,name}:user",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["genvalidationcode",{"_index":354,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["get('profile",{"_index":290,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":520,"title":{"index.html":{}},"body":{}}],["gmail",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":610,"title":{},"body":{"index.html":{}}}],["grow",{"_index":633,"title":{},"body":{"index.html":{}}}],["hands",{"_index":604,"title":{},"body":{"index.html":{}}}],["handy",{"_index":593,"title":{},"body":{"index.html":{}}}],["hash",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(newpassword,9",{"_index":405,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(password,9",{"_index":370,"title":{},"body":{"injectables/UserService.html":{}}}],["hashing",{"_index":371,"title":{},"body":{"injectables/UserService.html":{}}}],["havera",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["help",{"_index":608,"title":{},"body":{"index.html":{}}}],["here",{"_index":307,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["host",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host:config.host",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":646,"title":{},"body":{"index.html":{}}}],["id",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["id:false",{"_index":377,"title":{},"body":{"injectables/UserService.html":{}}}],["id:true",{"_index":386,"title":{},"body":{"injectables/UserService.html":{}}}],["id:user.id,name:user.name",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["ideal",{"_index":52,"title":{},"body":{"modules/AuthModule.html":{}}}],["identificador",{"_index":175,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["identifier",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["if(!passwordmatch",{"_index":391,"title":{},"body":{"injectables/UserService.html":{}}}],["if(!user",{"_index":383,"title":{},"body":{"injectables/UserService.html":{}}}],["if(doestheuseralreadyexist",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["if(refcode",{"_index":397,"title":{},"body":{"injectables/UserService.html":{}}}],["ignore",{"_index":426,"title":{},"body":{"injectables/UserService.html":{}}}],["ignoreexpiration",{"_index":199,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implementar",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["implements",{"_index":209,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":66,"title":{"index.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["inexistente",{"_index":169,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"interfaces/user.html":{}}}],["information",{"_index":567,"title":{},"body":{"index.html":{}}}],["informações",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["informe",{"_index":264,"title":{},"body":{"controllers/UserController.html":{}}}],["infrastructure",{"_index":590,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":63,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["injectables",{"_index":64,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inputstring",{"_index":519,"title":{},"body":{"miscellaneous/functions.html":{}}}],["install",{"_index":582,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":537,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":282,"title":{},"body":{"controllers/UserController.html":{}}}],["instância",{"_index":147,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["interact",{"_index":611,"title":{},"body":{"index.html":{}}}],["interface",{"_index":87,"title":{"interfaces/EmailType.html":{},"interfaces/user.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["interfaces",{"_index":107,"title":{},"body":{"interfaces/EmailType.html":{},"overview.html":{},"interfaces/user.html":{}}}],["internal",{"_index":287,"title":{},"body":{"controllers/UserController.html":{}}}],["j",{"_index":138,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["job",{"_index":626,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":628,"title":{},"body":{"index.html":{}}}],["join",{"_index":639,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":195,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_secret",{"_index":46,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["jwtestrategy.service",{"_index":49,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":197,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":41,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":50,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":42,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"interfaces/user.html":{}}}],["jwtstrategy",{"_index":39,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":643,"title":{},"body":{"index.html":{}}}],["key",{"_index":557,"title":{},"body":{"index.html":{}}}],["lançada",{"_index":131,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["learn",{"_index":596,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":649,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":631,"title":{},"body":{"index.html":{}}}],["lidar",{"_index":125,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["linkedin",{"_index":625,"title":{},"body":{"index.html":{}}}],["localizar",{"_index":181,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["logged",{"_index":309,"title":{},"body":{"controllers/UserController.html":{}}}],["looking",{"_index":568,"title":{},"body":{"index.html":{}}}],["loop",{"_index":621,"title":{},"body":{"index.html":{}}}],["lógica",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["mail",{"_index":429,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["makes",{"_index":576,"title":{},"body":{"index.html":{}}}],["managing",{"_index":589,"title":{},"body":{"index.html":{}}}],["mas",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":572,"title":{},"body":{"index.html":{}}}],["message",{"_index":284,"title":{},"body":{"controllers/UserController.html":{},"classes/ValidationError.html":{}}}],["metadata",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":67,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minha_chave_secreta",{"_index":202,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["miscellaneous",{"_index":502,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":630,"title":{},"body":{"index.html":{}}}],["mode",{"_index":542,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.service",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":566,"title":{},"body":{"index.html":{}}}],["motivos",{"_index":434,"title":{},"body":{"injectables/UserService.html":{}}}],["myśliwiec",{"_index":644,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":271,"title":{},"body":{"controllers/UserController.html":{}}}],["na",{"_index":179,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["name",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{}}}],["name:true",{"_index":378,"title":{},"body":{"injectables/UserService.html":{}}}],["nao",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":616,"title":{},"body":{"index.html":{}}}],["nest",{"_index":530,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":648,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":555,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"interfaces/user.html":{}}}],["nestjs/core",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"dependencies.html":{},"interfaces/user.html":{}}}],["nestjs/passport",{"_index":45,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":366,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["newpassword",{"_index":315,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["node.js",{"_index":523,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["nome",{"_index":151,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/UserController.html":{}}}],["npm",{"_index":536,"title":{},"body":{"index.html":{}}}],["não",{"_index":171,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"injectables/UserService.html":{}}}],["número",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["o",{"_index":155,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["object",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objeto",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ocorreu",{"_index":154,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["offer",{"_index":627,"title":{},"body":{"index.html":{}}}],["official",{"_index":573,"title":{},"body":{"index.html":{}}}],["ol",{"_index":413,"title":{},"body":{"injectables/UserService.html":{}}}],["onde",{"_index":153,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["onmoduleinit",{"_index":206,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":632,"title":{},"body":{"index.html":{}}}],["optional",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["ou",{"_index":176,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["outras",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":653,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":478,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padrão",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["para",{"_index":57,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":165,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["parameters",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["parse(body",{"_index":302,"title":{},"body":{"controllers/UserController.html":{}}}],["parse(process.env",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parse(req.body",{"_index":276,"title":{},"body":{"controllers/UserController.html":{}}}],["part",{"_index":617,"title":{},"body":{"index.html":{}}}],["pass",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":194,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":44,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["passportstrategy",{"_index":191,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":185,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":260,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password:await",{"_index":404,"title":{},"body":{"injectables/UserService.html":{}}}],["password:false",{"_index":380,"title":{},"body":{"injectables/UserService.html":{}}}],["password:true",{"_index":387,"title":{},"body":{"injectables/UserService.html":{}}}],["passwordmatch",{"_index":389,"title":{},"body":{"injectables/UserService.html":{}}}],["payload",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/user.html":{}}}],["payload.sub",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/user.html":{}}}],["payload.username",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/user.html":{}}}],["personalizada",{"_index":124,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["platform",{"_index":571,"title":{},"body":{"index.html":{}}}],["please",{"_index":599,"title":{},"body":{"index.html":{}}}],["pode",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["por",{"_index":433,"title":{},"body":{"injectables/UserService.html":{}}}],["port:587",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port:config.port",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["porta",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":563,"title":{},"body":{"index.html":{}}}],["post",{"_index":243,"title":{},"body":{"controllers/UserController.html":{}}}],["post(\"login",{"_index":300,"title":{},"body":{"controllers/UserController.html":{}}}],["post(\"recover",{"_index":321,"title":{},"body":{"controllers/UserController.html":{}}}],["post(\"register",{"_index":258,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":231,"title":{},"body":{"controllers/UserController.html":{}}}],["post('recover",{"_index":238,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":227,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":215,"title":{},"body":{"controllers/UserController.html":{}}}],["prisma",{"_index":335,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma.usercreateinput",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":208,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma:prismaservice",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["prismaclient",{"_index":205,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":15,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["production",{"_index":544,"title":{},"body":{"index.html":{}}}],["produção",{"_index":58,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["profile",{"_index":296,"title":{},"body":{"controllers/UserController.html":{}}}],["progressive",{"_index":522,"title":{},"body":{"index.html":{}}}],["project",{"_index":534,"title":{},"body":{"index.html":{}}}],["promise",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["properties",{"_index":114,"title":{"properties.html":{}},"body":{"interfaces/EmailType.html":{},"properties.html":{},"interfaces/user.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":244,"title":{},"body":{"controllers/UserController.html":{}}}],["put(\"password",{"_index":312,"title":{},"body":{"controllers/UserController.html":{}}}],["put('password",{"_index":241,"title":{},"body":{"controllers/UserController.html":{}}}],["quando",{"_index":132,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["que",{"_index":137,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["questions",{"_index":597,"title":{},"body":{"index.html":{}}}],["read",{"_index":640,"title":{},"body":{"index.html":{}}}],["ready",{"_index":553,"title":{},"body":{"index.html":{}}}],["real",{"_index":612,"title":{},"body":{"index.html":{}}}],["recebemos",{"_index":415,"title":{},"body":{"injectables/UserService.html":{}}}],["recoverycode",{"_index":323,"title":{},"body":{"controllers/UserController.html":{}}}],["recstring",{"_index":314,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["recuperação",{"_index":411,"title":{},"body":{"injectables/UserService.html":{}}}],["recusado",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redefinir",{"_index":417,"title":{},"body":{"injectables/UserService.html":{}}}],["redes",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refcode",{"_index":316,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["registeruser",{"_index":217,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(@req",{"_index":259,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(req",{"_index":222,"title":{},"body":{"controllers/UserController.html":{}}}],["rejectunauthorized:false",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reply",{"_index":410,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":533,"title":{},"body":{"index.html":{}}}],["req",{"_index":229,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user",{"_index":294,"title":{},"body":{"controllers/UserController.html":{}}}],["req:request",{"_index":292,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":223,"title":{},"body":{"controllers/UserController.html":{}}}],["requiring",{"_index":579,"title":{},"body":{"index.html":{}}}],["res",{"_index":224,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(200).json",{"_index":308,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(200).json(token",{"_index":298,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(201).json(response",{"_index":279,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(400).json",{"_index":320,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(401).json",{"_index":311,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(404).json",{"_index":299,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(409).json",{"_index":283,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(500).json",{"_index":286,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources",{"_index":591,"title":{},"body":{"index.html":{}}}],["response",{"_index":225,"title":{},"body":{"controllers/UserController.html":{}}}],["results",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["returnidafterlogin",{"_index":218,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returnidafterlogin(@body",{"_index":301,"title":{},"body":{"controllers/UserController.html":{}}}],["returnidafterlogin(body",{"_index":230,"title":{},"body":{"controllers/UserController.html":{}}}],["returnidafterlogin(email",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["returnidafterlogin(email:string,password:string",{"_index":385,"title":{},"body":{"injectables/UserService.html":{}}}],["returnprofile",{"_index":219,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returnprofile(@req",{"_index":291,"title":{},"body":{"controllers/UserController.html":{}}}],["returnprofile(id",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["returnprofile(id:string",{"_index":375,"title":{},"body":{"injectables/UserService.html":{}}}],["returnprofile(req",{"_index":234,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":538,"title":{},"body":{"index.html":{}}}],["runs",{"_index":561,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":527,"title":{},"body":{"index.html":{}}}],["se",{"_index":133,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"injectables/UserService.html":{}}}],["secret",{"_index":51,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":201,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure:465",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure:false",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["segurança",{"_index":435,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":376,"title":{},"body":{"injectables/UserService.html":{}}}],["sendemail",{"_index":352,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sendemail(_email",{"_index":442,"title":{},"body":{"injectables/UserService.html":{}}}],["sendemail(email",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sendrecoverycode",{"_index":220,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["sendrecoverycode(@body",{"_index":322,"title":{},"body":{"controllers/UserController.html":{}}}],["sendrecoverycode(body",{"_index":237,"title":{},"body":{"controllers/UserController.html":{}}}],["sendrecoverycode(email",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["sendrecoverycode(email:string",{"_index":406,"title":{},"body":{"injectables/UserService.html":{}}}],["senha",{"_index":268,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["ser",{"_index":516,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":288,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["setup",{"_index":535,"title":{},"body":{"index.html":{}}}],["shared/prisma/prisma.service",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":528,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":59,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":581,"title":{},"body":{"index.html":{}}}],["sistema",{"_index":140,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["smtp.gmail.com",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solicitação",{"_index":416,"title":{},"body":{"injectables/UserService.html":{}}}],["solicitou",{"_index":423,"title":{},"body":{"injectables/UserService.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"index.html":{},"interfaces/user.html":{}}}],["splitstringatdash",{"_index":356,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["splitstringatdash(inputstring",{"_index":518,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splitstringatdash(recstring",{"_index":396,"title":{},"body":{"injectables/UserService.html":{}}}],["sponsors",{"_index":635,"title":{},"body":{"index.html":{}}}],["src/.../genvalidcode.ts",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":504,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../nodemailer.ts",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../separatecookiestring.ts",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":40,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":65,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["src/modules/auth/auth.service.ts:14",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:6",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:9",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwtestrategy.service.ts",{"_index":184,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwtestrategy.service.ts:15",{"_index":189,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwtestrategy.service.ts:6",{"_index":187,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/user/user.controller.ts",{"_index":214,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:100",{"_index":239,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:17",{"_index":228,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:38",{"_index":236,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:55",{"_index":232,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:80",{"_index":242,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":327,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":331,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:107",{"_index":345,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:15",{"_index":334,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:18",{"_index":338,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:34",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:54",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:76",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/errors/entittydoesnotexists.error",{"_index":249,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/shared/errors/entittydoesnotexists.error.ts",{"_index":168,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"coverage.html":{}}}],["src/shared/errors/entittydoesnotexists.error.ts:5",{"_index":173,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["src/shared/errors/entityalreadyexistserror.error",{"_index":253,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/shared/errors/entityalreadyexistserror.error.ts",{"_index":121,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"coverage.html":{}}}],["src/shared/errors/entityalreadyexistserror.error.ts:5",{"_index":145,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["src/shared/errors/validationerror.erro",{"_index":251,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/shared/errors/validationerror.erro.ts",{"_index":447,"title":{},"body":{"classes/ValidationError.html":{},"coverage.html":{}}}],["src/shared/errors/validationerror.erro.ts:1",{"_index":449,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/shared/lib/env",{"_index":47,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/shared/lib/env/index.ts",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/lib/nodemailer",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/lib/nodemailer.ts",{"_index":468,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/shared/prisma/prisma.service",{"_index":328,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/shared/prisma/prisma.service.ts",{"_index":204,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/shared/prisma/prisma.service.ts:7",{"_index":207,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/shared/utils/genvalidcode",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/utils/genvalidcode.ts",{"_index":473,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/utils/separatecookiestring",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/utils/separatecookiestring.ts",{"_index":472,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/types/interfaces/emailtype",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["src/types/interfaces/emailtype.ts",{"_index":108,"title":{},"body":{"interfaces/EmailType.html":{},"coverage.html":{}}}],["ssl",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":540,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":543,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":545,"title":{},"body":{"index.html":{}}}],["started",{"_index":521,"title":{"index.html":{}},"body":{}}],["starter",{"_index":532,"title":{},"body":{"index.html":{}}}],["starttls",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":620,"title":{},"body":{"index.html":{}}}],["steps",{"_index":558,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":577,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":193,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":117,"title":{},"body":{"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{}}}],["sua",{"_index":418,"title":{},"body":{"injectables/UserService.html":{}}}],["sub:id",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["subject",{"_index":115,"title":{},"body":{"interfaces/EmailType.html":{}}}],["subject:\"no",{"_index":409,"title":{},"body":{"injectables/UserService.html":{}}}],["subject:string",{"_index":118,"title":{},"body":{"interfaces/EmailType.html":{}}}],["successfully",{"_index":310,"title":{},"body":{"controllers/UserController.html":{}}}],["super",{"_index":196,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(`entity",{"_index":166,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["super(message",{"_index":450,"title":{},"body":{"classes/ValidationError.html":{}}}],["suporte",{"_index":438,"title":{},"body":{"injectables/UserService.html":{}}}],["support",{"_index":598,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":651,"title":{},"body":{"modules.html":{}}}],["table",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":559,"title":{},"body":{"index.html":{}}}],["tenta",{"_index":134,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["tentativa",{"_index":180,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["ter",{"_index":270,"title":{},"body":{"controllers/UserController.html":{}}}],["test",{"_index":548,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":551,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":550,"title":{},"body":{"index.html":{}}}],["tests",{"_index":546,"title":{},"body":{"index.html":{}}}],["text",{"_index":116,"title":{},"body":{"interfaces/EmailType.html":{},"injectables/UserService.html":{}}}],["thanks",{"_index":634,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":211,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.generatetoken({id:response.id,name:response.name",{"_index":304,"title":{},"body":{"controllers/UserController.html":{}}}],["this.jwtservice.sign(payload",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["this.name",{"_index":183,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ValidationError.html":{}}}],["this.prisma.user.create({data:_data",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":402,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create",{"_index":278,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.returnidafterlogin(email",{"_index":303,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.returnprofile(token.id",{"_index":297,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.sendrecoverycode(email",{"_index":324,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatepasswordbyreccode(recstring",{"_index":318,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["time",{"_index":613,"title":{},"body":{"index.html":{}}}],["tls",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to:email",{"_index":408,"title":{},"body":{"injectables/UserService.html":{}}}],["token",{"_index":293,"title":{},"body":{"controllers/UserController.html":{}}}],["touch",{"_index":641,"title":{},"body":{"index.html":{}}}],["transport",{"_index":471,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["transporte",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["try",{"_index":277,"title":{},"body":{"controllers/UserController.html":{}}}],["twitter",{"_index":647,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["types/bcryptjs",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":531,"title":{},"body":{"index.html":{}}}],["um",{"_index":265,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["uma",{"_index":136,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/UserService.html":{}}}],["unit",{"_index":547,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":190,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":659,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":319,"title":{},"body":{"controllers/UserController.html":{}}}],["updated_at:true",{"_index":382,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepasswordbyreccode",{"_index":221,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatepasswordbyreccode(@body",{"_index":313,"title":{},"body":{"controllers/UserController.html":{}}}],["updatepasswordbyreccode(body",{"_index":240,"title":{},"body":{"controllers/UserController.html":{}}}],["updatepasswordbyreccode(recstring",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepasswordbyreccode(recstring:string,newpassword:string,refcode:string",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":622,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":401,"title":{},"body":{"injectables/UserService.html":{}}}],["usado",{"_index":178,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["usar",{"_index":53,"title":{},"body":{"modules/AuthModule.html":{}}}],["use",{"_index":203,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["useguards",{"_index":245,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":289,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('profile",{"_index":235,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":80,"title":{"interfaces/user.html":{}},"body":{"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":329,"title":{},"body":{"modules/UserModule.html":{}}}],["user.name",{"_index":414,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":246,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":213,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":14,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/user.html":{}}}],["userservice",{"_index":16,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice,prismaservice,authservice,jwtservice",{"_index":330,"title":{},"body":{"modules/UserModule.html":{}}}],["userservice,private",{"_index":257,"title":{},"body":{"controllers/UserController.html":{}}}],["user{id:string,name:string",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["using",{"_index":614,"title":{},"body":{"index.html":{}}}],["usuário",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["utilizada",{"_index":111,"title":{},"body":{"interfaces/EmailType.html":{}}}],["utilizando",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utilize",{"_index":420,"title":{},"body":{"injectables/UserService.html":{}}}],["valcode",{"_index":398,"title":{},"body":{"injectables/UserService.html":{}}}],["validate",{"_index":186,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":188,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["validationerror",{"_index":250,"title":{"classes/ValidationError.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["validationerror('invalid",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["validação",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["valor",{"_index":177,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["value",{"_index":144,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":660,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variáveis",{"_index":54,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["version",{"_index":657,"title":{},"body":{"properties.html":{}}}],["video",{"_index":606,"title":{},"body":{"index.html":{}}}],["visit",{"_index":595,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":609,"title":{},"body":{"index.html":{}}}],["voc",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["válido",{"_index":266,"title":{},"body":{"controllers/UserController.html":{}}}],["watch",{"_index":541,"title":{},"body":{"index.html":{}}}],["website",{"_index":645,"title":{},"body":{"index.html":{}}}],["working",{"_index":594,"title":{},"body":{"index.html":{}}}],["x",{"_index":624,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":638,"title":{},"body":{"index.html":{}}}],["you're",{"_index":552,"title":{},"body":{"index.html":{}}}],["z",{"_index":247,"title":{},"body":{"controllers/UserController.html":{}}}],["z.object",{"_index":261,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["z.string",{"_index":317,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["z.string().email(\"por",{"_index":262,"title":{},"body":{"controllers/UserController.html":{}}}],["z.string().min(3",{"_index":274,"title":{},"body":{"controllers/UserController.html":{}}}],["z.string().min(6",{"_index":267,"title":{},"body":{"controllers/UserController.html":{}}}],["zod",{"_index":248,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './shared/prisma/prisma.service';\nimport { UserService } from './modules/user/user.service';\nimport { UserModule } from './modules/user/user.module';\nimport { AuthModule } from './modules/auth/auth.module';\n\n\n@Module({\n  imports: [UserModule, AuthModule],\n  controllers: [],\n  providers: [PrismaService, UserService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JWT_SECRET } from 'src/shared/lib/env';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwtEstrategy.service';\n\n@Module({\n    imports: [\n        PassportModule,\n        JwtModule.register({\n          secret: JWT_SECRET, // ⚠️ Ideal usar variáveis de ambiente para produção\n          signOptions: { expiresIn: '1d' },\n        }),\n      ],\n    providers: [AuthService,JwtStrategy,JwtService],\n    \n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(undefined: user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            user\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\ninterface user{id:string,name:string}\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n  async generateToken({id,name}:user): Promise {\n    const payload = { username: name, sub:id };\n    return this.jwtService.sign(payload);\n  }\n\n  async validateUser(payload: any): Promise {\n    // Aqui você pode implementar a lógica de validação do usuário\n    return { id: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EmailType.html":{"url":"interfaces/EmailType.html","title":"interface - EmailType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EmailType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/emailType.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface de email utilizada para enviar emails\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EmailType{\n    text: string\n    to: string \n    subject:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityAlreadyExistsError.html":{"url":"classes/EntityAlreadyExistsError.html","title":"class - EntityAlreadyExistsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityAlreadyExistsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/errors/EntityAlreadyExistsError.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Classe de exceção personalizada para lidar com erros de duplicidade de entidade.\nEsta exceção é lançada quando se tenta criar uma entidade que já existe no sistema.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityName: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/errors/EntityAlreadyExistsError.error.ts:5\n                            \n                        \n\n                \n                    \n                            Cria uma instância de EntityAlreadyExistsException.\nExample :\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entityName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nNome da entidade onde ocorreu o erro.\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nCampo específico da entidade associado ao erro.\n\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            \"Entity User with email@email.com already exists\"\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EntityAlreadyExistsError extends Error {\n     /**\n     * Cria uma instância de EntityAlreadyExistsException.\n     * \n     * @param entityName - Nome da entidade onde ocorreu o erro.\n     * @param value - Campo específico da entidade associado ao erro.\n     * @example \"Entity User with email@email.com already exists\"\n     */\n    constructor(entityName: string, value: string) {\n        super(`Entity ${entityName} with ${value} already exists`);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityDoesNotExists.html":{"url":"classes/EntityDoesNotExists.html","title":"class - EntityDoesNotExists","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityDoesNotExists\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/errors/EntittyDoesNotExists.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Classe de exceção personalizada para lidar com erros de entidade inexistente.\nEsta exceção é lançada quando uma entidade esperada não é encontrada no sistema.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityName: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/errors/EntittyDoesNotExists.error.ts:5\n                            \n                        \n\n                \n                    \n                            Cria uma instância de EntityDoesNotExists.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entityName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nNome da entidade que não foi encontrada.\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nIdentificador ou valor usado na tentativa de localizar a entidade.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EntityDoesNotExists extends Error {\n    /**\n     * Cria uma instância de EntityDoesNotExists.\n     * \n     * @param entityName - Nome da entidade que não foi encontrada.\n     * @param value - Identificador ou valor usado na tentativa de localizar a entidade.\n     */\n    constructor(entityName: string, value: string) {\n        super(`Entity ${entityName} with ${value} does not exist`);\n        this.name = 'EntityDoesNotExists';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwtEstrategy.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwtEstrategy.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwtEstrategy.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: 'minha_chave_secreta', // ⚠️ Use variáveis de ambiente para produção\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/prisma/prisma.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit{\n    async onModuleInit() {\n        await this.$connect();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                registerUser\n                            \n                            \n                                    \n                                    Async\n                                returnIdAfterLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                returnProfile\n                            \n                            \n                                    \n                                    Async\n                                sendRecoveryCode\n                            \n                            \n                                    \n                                    Async\n                                updatePasswordByRecCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        returnIdAfterLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnIdAfterLogin(body: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        returnProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnProfile(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendRecoveryCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendRecoveryCode(body: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('recover')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updatePasswordByRecCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePasswordByRecCode(body: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Put, Req, Res, Body, UseGuards } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { z } from 'zod';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { ValidationError } from 'src/shared/errors/ValidationError.erro';\nimport { Request, Response } from 'express';\nimport { EntityAlreadyExistsError } from 'src/shared/errors/EntityAlreadyExistsError.error';\nimport { AuthService } from '../auth/auth.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('auth')\nexport class UserController {\n    \n    constructor(private UserService: UserService,private authService: AuthService) {}\n\n    @Post(\"register\")\n    async registerUser(@Req() req: Request, @Res() res: Response) {\n        const { email, name, password } = z.object({\n            email: z.string().email(\"Por favor informe um email válido\"),\n            password: z.string().min(6, \"A senha deve ter no mínimo 6 caracteres\"),\n            name: z.string().min(3, \"O nome deve ter no mínimo 3 caracteres\")\n        }).parse(req.body);\n\n        try {\n            const response = await this.UserService.create({ email, name, password });\n            res.status(201).json(response);\n        } catch (err) {\n            if (err instanceof EntityAlreadyExistsError) {\n                res.status(409).json({ message: err.message, description: \"User already exists\" });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @UseGuards(AuthGuard('jwt'))\n    @Get('profile')\n    async returnProfile(@Req() req:Request, @Res() res: Response) {\n        const token = req.user;\n        console.log(token)\n        try {\n            // const profile = await this.UserService.returnProfile(token.id);\n\n            res.status(200).json(token);\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @Post(\"login\")\n    async returnIdAfterLogin(@Body() body: any, @Res() res: Response) {\n        const { email, password } = z.object({\n            email: z.string().email(\"Por favor informe um email válido\"),\n            password: z.string().min(6, \"A senha deve ter no mínimo 6 caracteres\")\n        }).parse(body);\n\n        try {\n            const response = await this.UserService.returnIdAfterLogin(email, password);\n\n            const token = await this.authService.generateToken({id:response.id,name:response.name});\n            //Should generate the funcking token here;\n            res.status(200).json({\n                Description: \"User logged in successfully\",\n                token: token\n            });\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists || err instanceof ValidationError) {\n                res.status(401).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @Put(\"password\")\n    async updatePasswordByRecCode(@Body() body: any, @Res() res: Response) {\n        const { recString, newPassword, refCode } = z.object({\n            recString: z.string(),\n            newPassword: z.string().min(6, \"A senha deve ter no mínimo 6 caracteres\"),\n            refCode: z.string()\n        }).parse(body);\n\n        try {\n            await this.UserService.updatePasswordByRecCode(recString, newPassword, refCode);\n            res.status(200).json({ message: \"Password updated successfully\" });\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists || err instanceof ValidationError) {\n                res.status(400).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @Post(\"recover\")\n    async sendRecoveryCode(@Body() body: any, @Res() res: Response) {\n        const { email } = z.object({\n            email: z.string().email(\"Por favor informe um email válido\")\n        }).parse(body);\n\n        try {\n            const recoveryCode = await this.UserService.sendRecoveryCode(email);\n            res.status(200).json({ recoveryCode });\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { UserController } from './user.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { JWT_SECRET } from 'src/shared/lib/env';\nimport { AuthService } from '../auth/auth.service';\n\n@Module({\n  providers: [UserService,PrismaService,AuthService,JwtService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                returnIdAfterLogin\n                            \n                            \n                                    Async\n                                returnProfile\n                            \n                            \n                                    Async\n                                sendRecoveryCode\n                            \n                            \n                                    Async\n                                updatePasswordByRecCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        returnIdAfterLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnIdAfterLogin(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        returnProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendRecoveryCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendRecoveryCode(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePasswordByRecCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePasswordByRecCode(recString: string, newPassword: string, refCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { compare, hash } from 'bcryptjs';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { EntityAlreadyExistsError } from 'src/shared/errors/EntityAlreadyExistsError.error';\nimport { ValidationError } from 'src/shared/errors/ValidationError.erro';\nimport { ADMIN_EMAIL } from 'src/shared/lib/env';\nimport { SendEmail } from 'src/shared/lib/nodemailer';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { GenValidationCode } from 'src/shared/utils/genValidCode';\nimport { splitStringAtDash } from 'src/shared/utils/SeparateCookieString';\nimport { EmailType } from 'src/types/interfaces/emailType';\n\n@Injectable()\nexport class UserService {\n    constructor(private prisma:PrismaService) {}\n\n    async create(data:Prisma.UserCreateInput) {\n        const doesTheUserAlreadyExist = await this.prisma.user.findUnique({\n            where: {\n                email: data.email\n            }\n        })\n        if(doesTheUserAlreadyExist) {\n            throw new EntityAlreadyExistsError('User',data.email);\n        }\n        const {email,name,password,appointments,created_at} = data;\n\n        const _password = await hash(password,9); //hashing the password\n        const _data:Prisma.UserCreateInput = {email,name,password:_password,appointments,created_at}\n\n        return this.prisma.user.create({data:_data});\n    }\n    async returnProfile(id:string){\n        const user = await this.prisma.user.findUnique({\n            where:{\n                id\n            },\n            select:{\n                id:false,\n                name:true,\n                email:true,\n                password:false,\n                created_at:true,\n                updated_at:true}\n        })\n\n        if(!user){\n            throw new EntityDoesNotExists('User',id);\n        }\n\n        return user\n    }\n    async returnIdAfterLogin(email:string,password:string){\n        const user = await this.prisma.user.findUnique({\n            where:{\n                email\n            },\n            select:{\n                name:true,\n                id:true,\n                password:true,\n            }\n        })\n        if(!user){\n            throw new EntityDoesNotExists('User',email);\n        }\n        const passwordMatch = await compare(password,user.password);\n        if(!passwordMatch){\n            throw new ValidationError('Invalid password');\n        }\n        \n\n        return {id:user.id,name:user.name}\n    }\n    async updatePasswordByRecCode(recString:string,newPassword:string,refCode:string){\n        const [email,ValCode] = splitStringAtDash(recString)\n\n        const user = await this.prisma.user.findUnique({\n            where:{\n                email\n            },\n            select:{\n                id:true,\n                password:true,\n            }\n        })\n        if(!user){\n            throw new EntityDoesNotExists('User',email);\n        }\n\n        if(refCode !== ValCode){\n            throw new ValidationError('Invalid code');\n        }\n\n        //Atualizando a senha\n        const updateUser = await this.prisma.user.update({\n            where:{\n                email:email\n            },\n            data:{\n                password:await hash(newPassword,9)\n            }\n        })\n\n    }\n    async sendRecoveryCode(email:string){\n        const user = await this.prisma.user.findUnique({\n            where:{\n                email\n            },\n            select:{\n                id:true,\n                password:true,\n                name:true\n            }\n        })\n        if(!user){\n            throw new EntityDoesNotExists('User',email);\n        }\n        const code = GenValidationCode()\n        const _email:EmailType = {\n            to:email,\n            subject:\"No-Reply Email de recuperação de senha\",\n            text:`  Assunto: Recuperação de Senha\n\n                    Olá, ${user.name}\n\n                    Recebemos uma solicitação para redefinir a sua senha.\n\n                    Para continuar, utilize o código abaixo:\n\n                    ${code}\n\n                    Se você não solicitou essa alteração, ignore este e-mail. O código expirará em breve por motivos de segurança.\n\n                    Atenciosamente,\n                    Equipe de suporte.\n                    Dúvidas? Entre em contato: ${ADMIN_EMAIL}\n                `\n        }\n\n        \n        const a = await SendEmail(_email);\n        console.log(a);\n        return `${email}-${code}`//Retornando o email e o código de validação no formato email-codigo\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationError.html":{"url":"classes/ValidationError.html","title":"class - ValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/errors/ValidationError.erro.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/errors/ValidationError.erro.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ValidationError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'ValidationError';\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            interface\n            user\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwtEstrategy.service.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/errors/EntittyDoesNotExists.error.ts\n            \n            class\n            EntityDoesNotExists\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/shared/errors/EntityAlreadyExistsError.error.ts\n            \n            class\n            EntityAlreadyExistsError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/shared/errors/ValidationError.erro.ts\n            \n            class\n            ValidationError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/shared/lib/env/index.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/lib/nodemailer.ts\n            \n            function\n            SendEmail\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/shared/lib/nodemailer.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/lib/nodemailer.ts\n            \n            variable\n            transport\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/shared/utils/SeparateCookieString.ts\n            \n            function\n            splitStringAtDash\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/utils/genValidCode.ts\n            \n            function\n            GenValidationCode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/types/interfaces/emailType.ts\n            \n            interface\n            EmailType\n            \n                25 %\n                (1/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @prisma/client : ^6.5.0\n        \n            @types/bcryptjs : ^3.0.0\n        \n            @types/nodemailer : ^6.4.17\n        \n            bcryptjs : ^3.0.2\n        \n            dotenv : ^16.4.7\n        \n            nodemailer : ^6.10.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            prisma : ^6.5.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            zod : ^3.24.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            GenValidationCode   (src/.../genValidCode.ts)\n                        \n                        \n                            SendEmail   (src/.../nodemailer.ts)\n                        \n                        \n                            splitStringAtDash   (src/.../SeparateCookieString.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/utils/genValidCode.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GenValidationCode\n                        \n                    \n                \n            \n            \n                \nGenValidationCode()\n                \n            \n\n\n\n\n        \n    \n    src/shared/lib/nodemailer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SendEmail\n                        \n                    \n                \n            \n            \n                \nSendEmail(email: EmailType)\n                \n            \n\n\n\n\n            \n                \n                        Envia um e-mail utilizando as configurações do transporte de e-mail.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            EmailType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nObjeto contendo as informações do e-mail a ser enviado.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/shared/utils/SeparateCookieString.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        splitStringAtDash\n                        \n                    \n                \n            \n            \n                \nsplitStringAtDash(inputString: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/user.html":{"url":"interfaces/user.html","title":"interface - user","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  user\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\ninterface user{id:string,name:string}\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n  async generateToken({id,name}:user): Promise {\n    const payload = { username: name, sub:id };\n    return this.jwtService.sign(payload);\n  }\n\n  async validateUser(payload: any): Promise {\n    // Aqui você pode implementar a lógica de validação do usuário\n    return { id: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            config   (src/.../nodemailer.ts)\n                        \n                        \n                            transport   (src/.../nodemailer.ts)\n                        \n                        \n                               (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/lib/nodemailer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    host: \"smtp.gmail.com\", // Padrão para Gmail, mas pode ser alterado\n    port:587, // Conversão para número e padrão 587 (STARTTLS)\n    auth: {\n        user: ADMIN_EMAIL, // Usuário do e-mail\n        pass: ADMIN_PASSWORD  // Senha ou Senha de App\n    },\n    secure:465 // SSL para porta 465, STARTTLS para outras\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transport\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createTransport({\n    host:config.host,\n    port:config.port,\n    secure:false, //define que nao havera segurança\n    auth:config.auth, \n    tls:{\n        rejectUnauthorized:false //define que nao será recusado em redes nao autorizadas\n    }\n})\n                    \n                \n\n\n        \n    \n\n    src/shared/lib/env/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n    ADMIN_EMAIL: z.string(),\n    ADMIN_PASSWORD: z.string(),\n    JWT_SECRET: z.string(),\n}).parse(process.env)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
