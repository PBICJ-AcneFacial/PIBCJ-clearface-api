var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.922,1,1.894]],["body/modules/AppModule.html",[0,1.498,1,3.826,2,1.366,3,1.366,4,1.674,5,1.674,6,1.366,7,2.459,8,1.674,9,2.769,10,2.769,11,2.769,12,3.104,13,0.038,14,2.513,15,3.104,16,3.104,17,2.513,18,1.697,19,2.513,20,2.201,21,1.674,22,1.51,23,0.357,24,0.357,25,0.357,26,3.354,27,2.755,28,1.167,29,0.606,30,3.354,31,3.354,32,3.354,33,3.354,34,3.354,35,3.354,36,3.354,37,1.366,38,0.415,39,0.251,40,0.027,41,0.027]],["title/controllers/AppointmentsController.html",[42,1.365,43,1.894]],["body/controllers/AppointmentsController.html",[13,0.039,23,0.253,24,0.253,25,0.253,28,1.046,29,0.43,37,0.968,38,0.294,39,0.178,40,0.021,41,0.021,42,1.07,43,2.169,44,1.963,45,1.689,46,1.963,47,0.535,48,1.283,49,1.814,50,3.473,51,3.473,52,3.473,53,2.378,54,4.272,55,4.043,56,3.907,57,2.915,58,2.378,59,1.131,60,2.378,61,1.023,62,0.922,63,0.741,64,1.131,65,3.962,66,1.515,67,2.378,68,1.131,69,3.473,70,2.378,71,1.955,72,2.378,73,2.378,74,2.378,75,2.169,76,1.485,77,1.689,78,1.963,79,2.047,80,1.963,81,1.689,82,1.485,83,1.322,84,1.666,85,1.186,86,1.963,87,1.689,88,1.963,89,1.322,90,2.378,91,0.968,92,2.867,93,2.378,94,2.041,95,1.963,96,2.915,97,2.867,98,2.867,99,3.724,100,2.467,101,2.467,102,1.963,103,1.963,104,1.322,105,1.963,106,1.963,107,1.963,108,1.485,109,1.963,110,2.867,111,1.963,112,2.378,113,2.378,114,2.378,115,2.378,116,1.963,117,2.915,118,2.467,119,1.847,120,2.378,121,2.378,122,2.378,123,2.378,124,2.915,125,3.561,126,2.915,127,2.915,128,2.787,129,2.915,130,2.915,131,2.915,132,2.915,133,2.047,134,2.378,135,2.378,136,2.378,137,2.378,138,2.378,139,2.378,140,2.378,141,2.378]],["title/modules/AppointmentsModule.html",[0,0.922,12,1.686]],["body/modules/AppointmentsModule.html",[0,1.605,2,1.58,3,1.58,4,1.935,5,1.935,6,1.58,7,2.633,8,1.935,12,3.308,13,0.038,14,1.746,18,1.729,20,2.416,21,1.935,22,1.746,23,0.413,24,0.413,25,0.413,28,1.149,29,0.701,37,1.972,38,0.479,39,0.29,40,0.03,41,0.03,43,3.297,79,2.838,80,3.202,142,3.202,143,3.202,144,3.879,145,1.935,146,3.879,147,3.202,148,3.879]],["title/injectables/AppointmentsService.html",[79,1.513,149,0.682]],["body/injectables/AppointmentsService.html",[13,0.039,18,1.384,23,0.306,24,0.306,25,0.306,28,0.992,29,0.519,38,0.355,39,0.214,40,0.024,41,0.024,47,0.645,48,1.466,49,1.896,59,1.354,61,1.224,62,1.104,63,0.888,64,1.354,66,1.681,68,1.354,71,1.617,79,1.981,84,1.06,85,1.432,91,1.169,94,2.1,118,3.49,119,2.401,145,1.432,149,0.893,150,1.292,151,2.369,152,2.821,153,3.97,154,3.97,155,1.169,156,2.039,157,2.87,158,2.48,159,2.039,160,3.97,161,2.87,162,2.48,163,2.843,164,2.87,165,2.87,166,3.277,167,2.87,168,2.87,169,1.596,170,2.039,171,2.87,172,2.87,173,2.87,174,2.87,175,2.87,176,3.49,177,3.068,178,2.87,179,3.97,180,3.277,181,2.87,182,3.97,183,2.87,184,2.87,185,3.758,186,3.758,187,4.552,188,2.87,189,3.758,190,2.271,191,2.87,192,2.87,193,2.87,194,2.87,195,3.97,196,2.87,197,2.369,198,2.87,199,2.87]],["title/modules/AuthModule.html",[0,0.922,14,1.365]],["body/modules/AuthModule.html",[0,1.549,2,1.463,3,1.463,4,1.793,5,1.793,6,1.463,7,2.542,8,2.542,13,0.038,14,2.664,20,2.301,21,1.793,22,1.617,23,0.383,24,0.383,25,0.383,27,2.244,28,1.149,29,0.649,38,0.444,39,0.268,40,0.028,41,0.028,89,1.998,200,2.966,201,2.966,202,2.966,203,2.43,204,3.091,205,3.593,206,3.593,207,2.244,208,3.593,209,4.612,210,3.277,211,2.553,212,3.593,213,3.593,214,3.593,215,3.593,216,2.244,217,3.593,218,3.593,219,3.593,220,3.593,221,3.593,222,3.593,223,3.593]],["title/injectables/AuthService.html",[149,0.682,203,1.235]],["body/injectables/AuthService.html",[13,0.038,23,0.369,24,0.369,25,0.369,28,0.91,29,0.625,38,0.428,39,0.259,40,0.028,41,0.028,47,0.778,48,1.663,49,1.887,59,1.379,61,1.247,62,1.235,63,0.904,64,1.379,66,1.663,71,1.41,91,1.41,94,1.41,104,1.924,149,1.012,150,1.558,155,1.41,190,2.246,203,1.834,207,2.162,224,2.459,225,4.502,226,4.502,227,3.461,228,4.648,229,3.461,230,3.461,231,1.834,232,3.461,233,4.374,234,3.716,235,3.461,236,3.199,237,1.727,238,2.857,239,2.857,240,2.857,241,2.857,242,2.857,243,2.857,244,2.857,245,2.857,246,2.459,247,2.459,248,2.857,249,2.857,250,1.278,251,2.162,252,2.459,253,2.459,254,2.459]],["title/interfaces/EmailType.html",[237,1.513,255,1.686]],["body/interfaces/EmailType.html",[13,0.036,23,0.45,24,0.45,25,0.45,38,0.523,40,0.031,41,0.031,47,0.95,63,0.991,68,1.665,237,2.547,250,1.561,255,2.838,256,3.003,257,3.489,258,1.722,259,2.35,260,4.227,261,2.109,262,4.227,263,4.227,264,2.838,265,5.482,266,4.7,267,4.227]],["title/classes/EntityAlreadyExistsError.html",[39,0.227,268,1.513]],["body/classes/EntityAlreadyExistsError.html",[13,0.038,23,0.354,24,0.354,25,0.354,38,0.411,39,0.248,40,0.027,41,0.027,59,0.915,61,0.828,62,0.747,63,0.6,64,0.915,68,1.534,76,2.738,133,2.187,155,1.353,231,1.785,250,2.002,258,1.785,261,1.658,268,2.187,269,2.075,270,2.742,271,2.742,272,3.618,273,2.742,274,2.742,275,2.075,276,2.742,277,3.322,278,3.956,279,2.742,280,2.742,281,2.742,282,2.742,283,3.322,284,2.742,285,3.064,286,2.361,287,2.742,288,2.742,289,2.361,290,2.437,291,3.618,292,3.852,293,3.322,294,3.114,295,3.618,296,4.383,297,3.485,298,4.049,299,2.738,300,3.706,301,4.383,302,4.383,303,2.738,304,4.305,305,4.383,306,4.383,307,3.618,308,4.383,309,3.618,310,4.383,311,3.485,312,3.485,313,2.742]],["title/classes/EntityDoesNotExists.html",[39,0.227,84,1.12]],["body/classes/EntityDoesNotExists.html",[13,0.038,23,0.365,24,0.365,25,0.365,38,0.424,39,0.256,40,0.028,41,0.028,59,0.944,61,0.854,62,0.771,63,0.619,64,0.944,68,1.548,76,2.794,84,2.023,133,2.232,155,1.396,250,2.074,258,1.822,261,1.71,269,2.141,271,2.829,272,3.693,273,2.829,274,2.829,275,2.141,276,2.829,278,3.99,279,2.829,280,2.829,281,2.829,285,3.111,286,3.178,289,2.435,290,2.487,291,3.693,292,3.891,294,3.178,295,3.693,298,4.111,299,2.794,300,3.178,313,2.829,314,2.829,315,3.427,316,3.427,317,3.538,318,4.111,319,3.427,320,4.473,321,4.473,322,3.693,323,4.473,324,4.473,325,4.473,326,4.473,327,4.473,328,3.427,329,2.829]],["title/controllers/ImagesController.html",[42,1.365,330,1.894]],["body/controllers/ImagesController.html",[13,0.039,17,1.782,23,0.305,24,0.305,25,0.484,28,1.076,29,0.517,37,1.164,38,0.353,39,0.214,40,0.024,41,0.024,42,1.287,45,2.031,47,0.643,48,1.462,49,1.785,55,4.016,56,3.88,57,2.813,59,1.091,61,0.987,62,0.89,63,0.715,64,1.091,66,1.462,68,1.252,75,2.473,76,1.786,77,3.658,81,2.031,82,1.786,83,2.202,84,1.678,85,1.426,91,1.164,94,1.85,117,2.813,119,1.782,124,2.813,125,3.484,126,2.813,127,2.813,128,2.727,129,3.484,130,2.813,275,1.786,330,2.473,331,2.36,332,3.268,333,3.959,334,3.959,335,2.859,336,3.959,337,2.859,338,2.859,339,2.859,340,3.959,341,2.859,342,2.813,343,2.859,344,2.859,345,2.36,346,2.859,347,2.031,348,2.859,349,2.859,350,2.859,351,2.859,352,2.859,353,3.268,354,2.859,355,2.859,356,2.859,357,2.36,358,2.859,359,2.859,360,2.859,361,2.36,362,2.859,363,2.859,364,2.859,365,2.36,366,2.859,367,2.859,368,2.859,369,2.859]],["title/modules/ImagesModule.html",[0,0.922,15,1.686]],["body/modules/ImagesModule.html",[0,1.595,2,1.559,3,1.559,4,1.909,5,1.909,6,1.559,7,2.395,8,1.909,13,0.038,15,3.299,17,2.55,18,1.722,20,2.395,21,1.909,22,1.722,23,0.408,24,0.408,25,0.408,27,2.39,28,1.145,29,0.691,37,1.955,38,0.473,39,0.286,40,0.03,41,0.03,83,2.128,145,1.909,330,3.276,345,3.158,347,2.719,370,3.826,371,3.826,372,3.826,373,3.826,374,3.826,375,3.826,376,3.826,377,3.826]],["title/injectables/ImagesService.html",[17,1.365,149,0.682]],["body/injectables/ImagesService.html",[13,0.038,17,2.029,18,1.523,23,0.37,24,0.37,25,0.37,28,1.111,29,0.627,38,0.429,39,0.259,40,0.028,41,0.028,47,0.78,48,1.665,49,1.888,59,1.38,61,1.249,62,1.126,63,0.905,64,1.38,66,1.665,68,1.242,84,1.281,85,1.731,91,1.413,94,1.413,119,2.029,145,1.731,149,1.014,150,1.561,152,3.204,155,1.413,156,2.465,158,2.816,159,2.465,162,2.816,163,2.816,169,1.929,170,2.465,176,2.465,177,2.167,190,2.25,197,2.864,268,1.731,342,2.465,378,2.864,379,4.509,380,3.469,381,4.509,382,3.469,383,3.469,384,3.469,385,2.465,386,3.469,387,3.469,388,3.469,389,4.509,390,3.469,391,3.469,392,3.469]],["title/injectables/JwtStrategy.html",[149,0.682,204,1.686]],["body/injectables/JwtStrategy.html",[13,0.038,23,0.394,24,0.394,25,0.394,28,1.097,29,0.668,38,0.457,39,0.276,40,0.029,41,0.029,47,0.831,48,1.734,49,1.73,59,1.294,61,0.921,62,0.831,63,0.668,64,1.018,66,1.365,71,1.506,86,3.051,87,2.626,89,2.055,104,2.055,149,1.056,150,1.664,155,2.103,163,2.309,190,1.844,204,2.611,210,3.337,211,2.626,216,2.309,236,2.626,250,1.365,253,2.626,254,2.626,261,1.844,290,2.611,393,3.051,394,4.696,395,4.696,396,3.696,397,4.696,398,3.696,399,3.696,400,3.696,401,3.696,402,3.696,403,3.696,404,3.696,405,3.696,406,3.696,407,3.696,408,3.696,409,3.696,410,3.696]],["title/injectables/PrismaService.html",[18,0.922,149,0.682]],["body/injectables/PrismaService.html",[13,0.038,18,1.543,23,0.446,24,0.446,25,0.446,28,1.026,29,0.757,38,0.518,39,0.313,40,0.031,41,0.031,47,0.942,48,1.875,49,1.83,59,1.154,66,1.547,119,1.886,149,1.141,150,1.886,169,2.329,290,2.823,411,3.458,412,5.461,413,5.91,414,4.189,415,4.189,416,4.189]],["title/controllers/UserController.html",[42,1.365,417,1.894]],["body/controllers/UserController.html",[13,0.039,19,1.196,23,0.178,24,0.178,25,0.178,28,0.988,29,0.302,37,0.682,38,0.207,39,0.125,40,0.016,41,0.016,42,0.753,45,1.189,47,0.376,48,0.981,49,1.814,54,3.604,55,4.029,56,3.95,57,2.915,59,1.13,61,1.023,62,1.068,63,0.741,64,1.13,65,3.105,66,1.515,71,0.682,75,1.045,77,3.252,78,1.381,81,1.189,82,1.045,83,0.931,84,1.515,85,0.835,88,1.381,89,0.931,91,0.682,92,1.381,94,2.041,95,1.381,96,2.915,97,1.381,98,1.381,99,2.193,100,1.189,101,1.189,102,1.381,103,1.381,104,0.931,105,3.386,106,3.386,107,3.386,108,1.659,109,3.386,110,1.381,116,1.381,117,2.915,119,1.965,124,2.915,125,3.634,126,3.252,127,2.347,128,2.787,129,3.252,130,2.915,131,2.672,132,2.672,133,1.877,203,1.346,231,1.346,258,1.346,259,2.787,268,1.326,299,1.045,303,1.045,311,1.189,312,1.189,385,1.189,417,1.659,418,1.381,419,1.381,420,2.657,421,2.193,422,2.193,423,2.193,424,2.193,425,1.673,426,1.673,427,1.673,428,1.673,429,1.673,430,1.673,431,1.673,432,1.673,433,1.673,434,1.673,435,1.673,436,1.673,437,1.673,438,1.673,439,1.673,440,1.381,441,1.381,442,1.837,443,1.381,444,1.381,445,1.673,446,1.673,447,1.673,448,1.673,449,3.252,450,3.303,451,3.303,452,3.303,453,2.347,454,3.303,455,3.303,456,2.347,457,2.347,458,1.673,459,1.673,460,1.673,461,1.673,462,1.673,463,1.673,464,1.673,465,1.673,466,3.303,467,1.673,468,3.761,469,1.673,470,2.727,471,1.673,472,1.673,473,3.303,474,1.673,475,1.673,476,1.673,477,3.105,478,1.673,479,1.673,480,1.673,481,1.673,482,1.381,483,1.673,484,1.673,485,1.381,486,1.673,487,1.673,488,1.673,489,1.673,490,1.673,491,1.673,492,1.673,493,1.887,494,2.347,495,2.347,496,2.193,497,1.673,498,1.381,499,1.673,500,1.673,501,1.673,502,2.193,503,1.673]],["title/modules/UserModule.html",[0,0.922,16,1.686]],["body/modules/UserModule.html",[0,1.562,2,1.49,3,1.49,4,1.825,5,1.825,6,1.49,7,2.563,8,1.825,13,0.038,14,2.516,16,3.367,18,1.699,19,2.516,20,2.328,21,1.825,22,1.646,23,0.39,24,0.39,25,0.39,27,2.285,28,1.155,29,0.661,37,1.9,38,0.452,39,0.273,40,0.029,41,0.029,145,1.825,147,3.019,203,2.277,417,3.209,441,3.019,444,3.019,504,3.658,505,3.658,506,3.658,507,3.658,508,3.658,509,3.658,510,3.658]],["title/injectables/UserService.html",[19,1.365,149,0.682]],["body/injectables/UserService.html",[13,0.039,18,1.101,19,1.338,23,0.206,24,0.206,25,0.206,28,1.089,29,0.349,38,0.239,39,0.144,40,0.018,41,0.018,47,0.434,48,1.098,49,1.867,59,1.278,61,1.156,62,1.042,63,0.838,64,1.278,66,1.622,68,1.521,71,1.211,84,0.714,85,0.964,91,0.787,94,2.248,119,2.302,145,0.964,149,0.668,150,0.87,152,2.112,155,0.787,156,1.373,158,1.857,159,1.373,162,2.263,163,2.54,169,1.074,170,1.373,176,3.431,177,3.017,180,3.624,185,3.357,186,2.99,189,1.595,190,2.029,211,1.373,231,1.788,246,1.373,250,1.712,251,1.207,255,1.074,259,2.903,261,1.483,266,1.595,268,0.964,282,1.595,285,1.207,303,2.54,317,1.373,385,1.373,421,2.453,422,2.453,423,2.453,424,2.453,442,1.074,443,1.595,449,2.89,456,2.89,493,1.373,494,2.112,495,2.112,511,1.595,512,1.932,513,2.972,514,1.932,515,1.932,516,1.932,517,1.932,518,1.932,519,1.932,520,1.932,521,1.932,522,1.932,523,1.932,524,1.932,525,1.595,526,2.453,527,1.373,528,1.932,529,2.112,530,1.932,531,1.373,532,1.932,533,1.932,534,1.932,535,1.932,536,1.932,537,1.932,538,1.932,539,1.932,540,1.932,541,1.932,542,1.932,543,1.932,544,1.932,545,1.932,546,1.932,547,1.932,548,3.622,549,1.932,550,1.932,551,1.932,552,4.067,553,1.932,554,1.932,555,3.622,556,3.622,557,1.932,558,1.932,559,1.932,560,2.972,561,1.932,562,1.932,563,1.932,564,1.932,565,1.932,566,1.932,567,3.622,568,1.932,569,1.932,570,1.932,571,1.932,572,1.932,573,1.932,574,1.932,575,1.932,576,1.932,577,1.932,578,1.932,579,2.453,580,1.932,581,1.932,582,1.932,583,1.932,584,1.932,585,1.932,586,1.932,587,1.932,588,1.932,589,2.99,590,1.932,591,1.932,592,1.932,593,1.932,594,1.932,595,1.932,596,2.112,597,1.373,598,1.932,599,2.453,600,1.932,601,1.595,602,1.932,603,1.595,604,1.932,605,1.932,606,1.932,607,1.932,608,1.932,609,1.932,610,1.932,611,1.932,612,1.932,613,1.932,614,1.932]],["title/classes/ValidationError.html",[39,0.227,442,1.686]],["body/classes/ValidationError.html",[13,0.037,23,0.461,24,0.461,25,0.461,38,0.535,39,0.324,40,0.032,41,0.032,59,1.193,61,1.079,62,0.974,63,0.782,64,1.193,68,1.527,128,2.408,133,2.584,155,1.764,269,2.705,290,2.879,329,3.575,442,3.08,615,3.575,616,5.178,617,4.331,618,4.331]],["title/coverage.html",[619,2.929]],["body/coverage.html",[6,1.334,13,0.038,17,1.475,18,0.996,19,1.475,25,0.349,39,0.364,40,0.027,41,0.027,42,2.193,43,2.046,44,2.704,63,0.592,79,1.635,84,1.21,149,1.247,151,2.704,177,2.046,203,1.334,204,1.822,224,3.085,231,1.334,237,2.167,255,1.822,257,2.704,268,1.635,270,2.704,314,2.704,330,2.046,331,2.704,378,2.704,393,2.704,411,2.704,417,2.046,418,2.704,442,1.822,511,2.704,527,2.328,529,2.328,531,2.328,615,2.704,619,2.328,620,2.704,621,3.276,622,3.276,623,2.704,624,5.187,625,6.111,626,5.658,627,4.871,628,3.276,629,4.871,630,3.276,631,3.276,632,4.871,633,4.343,634,4.343,635,2.704,636,5.187,637,3.461,638,3.276,639,2.704,640,2.704,641,2.704,642,2.704,643,3.276,644,3.276,645,2.704,646,2.704,647,3.276,648,3.276]],["title/dependencies.html",[3,1.484,649,2.096]],["body/dependencies.html",[3,1.615,13,0.039,29,0.717,40,0.03,41,0.03,82,2.477,83,2.205,87,3.487,89,2.205,158,2.477,169,2.205,207,2.477,216,2.477,347,2.818,525,3.274,650,4.908,651,3.966,652,3.966,653,3.966,654,3.966,655,3.966,656,3.966,657,4.908,658,3.966,659,3.274,660,3.966,661,3.966,662,3.966,663,3.966,664,3.966,665,3.966,666,3.966,667,3.966,668,3.966,669,3.966,670,3.966,671,3.966,672,3.966,673,3.966,674,3.966,675,3.966,676,3.966,677,3.966,678,3.966,679,3.966]],["title/miscellaneous/functions.html",[680,1.586,681,3.007]],["body/miscellaneous/functions.html",[6,2.193,13,0.035,40,0.031,41,0.031,47,0.912,61,1.241,62,1.119,63,0.899,64,1.372,68,1.372,250,1.498,255,2.768,258,1.652,259,2.256,453,2.882,527,3.537,529,3.826,531,3.537,596,3.826,597,3.826,623,3.349,637,2.882,641,3.349,642,3.349,680,2.534,681,3.349,682,4.057,683,4.057,684,3.349,685,4.057,686,4.057,687,3.349,688,4.057,689,4.057,690,4.057,691,4.057,692,4.057,693,3.349,694,3.349,695,3.349,696,4.057,697,4.057]],["title/index.html",[47,0.571,698,2.539,699,2.539]],["body/index.html",[13,0.037,22,2.34,24,0.282,40,0.023,41,0.023,258,1.079,297,3.37,482,2.187,619,1.882,620,3.099,700,2.649,701,2.649,702,2.187,703,2.187,704,2.649,705,3.754,706,2.649,707,2.649,708,2.649,709,2.649,710,2.649,711,4.36,712,3.754,713,2.649,714,2.649,715,2.649,716,4.743,717,2.649,718,5.462,719,2.649,720,5.346,721,2.649,722,2.649,723,2.649,724,3.754,725,2.649,726,3.754,727,2.649,728,4.36,729,2.649,730,3.754,731,2.649,732,2.649,733,2.649,734,2.649,735,2.649,736,4.743,737,5.462,738,5.199,739,2.649,740,3.754,741,2.649,742,2.649,743,2.649,744,2.649,745,2.649,746,5.199,747,3.754,748,4.743,749,2.649,750,3.754,751,2.649,752,2.649,753,3.754,754,5.199,755,4.743,756,2.649,757,2.649,758,3.754,759,2.649,760,2.649,761,2.649,762,2.649,763,4.743,764,2.649,765,2.649,766,2.649,767,2.649,768,3.754,769,2.649,770,2.649,771,2.649,772,2.649,773,2.649,774,2.649,775,3.754,776,2.649,777,2.649,778,2.649,779,3.754,780,2.649,781,2.649,782,3.915,783,3.754,784,2.649,785,2.649,786,2.649,787,2.649,788,2.649,789,2.649,790,2.649,791,2.649,792,3.754,793,2.649,794,2.649,795,2.649,796,2.649,797,3.599,798,2.649,799,2.649,800,2.649,801,2.649,802,2.649,803,3.754,804,2.649,805,2.649,806,2.649,807,2.649,808,2.649,809,3.754,810,2.649,811,2.649,812,2.649,813,3.099,814,3.754,815,2.649,816,2.649,817,2.649,818,2.649,819,2.649,820,2.649,821,2.649,822,2.649,823,2.649,824,2.649,825,2.187,826,2.649,827,2.649,828,2.649,829,2.649,830,2.649,831,2.649,832,1.882]],["title/modules.html",[2,1.679]],["body/modules.html",[1,2.782,2,1.814,12,2.476,13,0.032,14,2.004,15,2.476,16,2.476,40,0.032,41,0.032,782,4.88,833,5.912,834,5.912,835,5.912]],["title/overview.html",[836,3.403]],["body/overview.html",[0,1.03,1,3.807,2,1.379,3,1.379,4,1.69,5,1.69,6,1.379,7,1.69,8,1.69,9,2.795,10,2.795,11,2.795,12,3.172,13,0.038,14,2.634,15,3.172,16,3.309,17,2.365,18,1.702,19,2.365,20,2.215,21,1.69,22,1.524,37,1.379,40,0.027,41,0.027,79,2.47,108,2.772,142,2.795,143,2.795,150,1.524,200,2.795,201,2.795,202,2.795,203,2.357,204,2.753,256,2.406,269,2.115,457,2.406,836,2.795,837,3.386,838,3.386]],["title/properties.html",[264,2.025,649,2.096]],["body/properties.html",[13,0.037,40,0.033,41,0.033,258,1.904,264,2.599,825,3.859,832,3.321,839,3.859,840,4.674,841,4.674]],["title/interfaces/user.html",[231,1.235,237,1.513]],["body/interfaces/user.html",[13,0.038,23,0.399,24,0.399,25,0.399,28,0.957,29,0.677,38,0.463,39,0.28,40,0.029,41,0.029,47,0.842,49,1.587,62,1.266,63,0.856,68,1.504,71,2.223,91,1.525,94,1.525,104,2.083,149,1.065,190,2.363,203,1.525,207,2.339,224,2.661,228,4.287,231,1.525,233,3.909,234,3.091,236,2.661,237,1.869,238,3.091,239,3.091,240,3.091,241,3.091,242,3.091,243,3.091,244,3.091,245,3.091,246,2.661,247,2.661,248,3.091,249,3.091,250,1.383,251,2.339,252,2.661,253,2.661,254,2.661,256,2.661,264,2.633]],["title/miscellaneous/variables.html",[680,1.586,842,3.007]],["body/miscellaneous/variables.html",[13,0.039,23,0.082,40,0.008,41,0.008,46,2.774,47,0.174,61,0.651,62,0.707,63,0.997,68,1.406,71,1.281,75,1.631,96,0.549,100,1.329,101,2.06,108,0.483,111,1.14,118,0.549,128,2.686,131,2.64,132,2.64,133,1.928,162,0.483,166,0.638,210,0.549,216,1.42,231,1.064,247,0.549,250,1.74,251,0.483,252,3.7,258,2.337,259,2.223,261,1.677,264,2.149,275,1.965,278,0.549,284,0.638,285,1.631,286,0.981,287,0.638,288,0.638,289,0.549,292,1.615,294,0.981,297,3.469,299,0.483,300,2.06,303,0.862,304,3.19,307,0.638,309,0.638,311,0.981,312,0.981,317,3.197,318,2.774,322,1.14,332,0.638,342,0.549,353,1.14,357,1.544,361,1.14,365,0.638,419,2.393,440,0.638,449,2.06,453,2.06,456,2.746,457,1.329,470,0.638,477,2.393,485,0.638,493,0.981,494,0.981,495,0.981,496,1.544,498,0.638,502,0.638,526,1.14,579,2.393,589,2.393,596,2.522,597,1.856,599,0.638,601,1.14,603,0.638,635,0.638,637,0.549,639,1.14,640,1.14,645,0.638,646,1.14,659,0.638,680,0.483,684,1.14,687,0.638,693,0.638,694,1.544,695,1.14,702,0.638,703,0.638,797,2.393,813,0.638,832,0.549,839,0.638,842,0.638,843,0.773,844,0.773,845,3.998,846,2.274,847,0.773,848,0.773,849,1.381,850,0.773,851,0.773,852,0.773,853,0.773,854,0.773,855,0.773,856,0.773,857,1.381,858,0.773,859,1.381,860,0.773,861,0.773,862,0.773,863,0.773,864,0.773,865,0.773,866,0.773,867,0.773,868,0.773,869,0.773,870,1.381,871,0.773,872,0.773,873,0.773,874,0.773,875,0.773,876,0.773,877,0.773,878,0.773,879,0.773,880,0.773,881,1.87,882,0.773,883,0.773,884,0.773,885,0.773,886,0.773,887,0.773,888,0.773,889,3.865,890,0.773,891,1.381,892,0.773,893,0.773,894,2.899,895,0.773,896,0.773,897,3.716,898,0.773,899,0.773,900,2.899,901,3.998,902,3.549,903,5.374,904,5.35,905,4.416,906,4.499,907,2.274,908,3.716,909,1.87,910,0.773,911,2.899,912,3.361,913,1.87,914,0.773,915,3.716,916,3.716,917,3.716,918,0.773,919,1.381,920,0.773,921,2.274,922,3.146,923,0.773,924,0.773,925,0.773,926,0.773,927,0.773,928,0.773,929,0.773,930,3.361,931,3.716,932,0.773,933,1.381,934,1.87,935,2.274,936,1.87,937,1.87,938,1.87,939,1.87,940,0.773,941,0.773,942,0.773,943,0.773,944,1.381,945,0.773,946,0.773,947,0.773,948,0.773,949,0.773,950,0.773,951,4.647,952,0.773,953,0.773,954,0.773,955,0.773,956,0.773,957,0.773,958,1.87,959,3.146,960,0.773,961,0.773,962,0.773,963,1.87,964,0.773,965,1.381,966,1.381,967,0.773,968,1.381,969,1.381,970,0.773,971,0.773,972,0.773,973,1.381,974,0.773,975,0.773,976,0.773,977,1.381,978,0.773,979,0.773,980,1.381,981,0.773,982,0.773,983,0.773,984,0.773,985,0.773,986,0.773,987,0.773,988,0.773,989,0.773,990,0.773,991,0.773,992,0.773,993,0.773,994,0.773,995,0.773,996,1.87,997,2.899,998,1.87,999,0.773,1000,0.773,1001,0.773,1002,0.773,1003,0.773,1004,0.773,1005,0.773,1006,0.773,1007,0.773,1008,0.773]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":840,"title":{},"body":{"properties.html":{}}}],["0.2.0",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["1.0",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.12",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["11.0.7",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["123456",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.4.7",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":838,"title":{},"body":{"overview.html":{}}}],["2/2",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["201",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":108,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["3.0.0",{"_index":659,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["3.24.2",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["409",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["465",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":837,"title":{},"body":{"overview.html":{}}}],["500",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["587",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":457,"title":{},"body":{"controllers/UserController.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["6.10.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["9]{25",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_data:prisma.usercreateinput",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["_email:emailtype",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["_password",{"_index":540,"title":{},"body":{"injectables/UserService.html":{}}}],["abaixo",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["acne",{"_index":703,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["additionalproperties",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin_email",{"_index":526,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["admin_password",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowing",{"_index":769,"title":{},"body":{"index.html":{}}}],["already",{"_index":311,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["alterado",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alterar",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alteração",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":819,"title":{},"body":{"index.html":{}}}],["ambiente",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["análise",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ao",{"_index":308,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["api",{"_index":702,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":738,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":757,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":118,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"miscellaneous/variables.html":{}}}],["appointment_id",{"_index":342,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["appointments",{"_index":136,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["appointments.controller",{"_index":146,"title":{},"body":{"modules/AppointmentsModule.html":{}}}],["appointments.service",{"_index":80,"title":{},"body":{"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{}}}],["appointmentscontroller",{"_index":43,"title":{"controllers/AppointmentsController.html":{}},"body":{"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"coverage.html":{}}}],["appointmentsmodule",{"_index":12,"title":{"modules/AppointmentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentsservice",{"_index":79,"title":{"injectables/AppointmentsService.html":{}},"body":{"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentsservice,prismaservice",{"_index":148,"title":{},"body":{"modules/AppointmentsModule.html":{}}}],["após",{"_index":356,"title":{},"body":{"controllers/ImagesController.html":{}}}],["aqui",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["arquivo",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associa",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associada",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associadas",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associado",{"_index":307,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"miscellaneous/variables.html":{}}}],["assunto",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["async",{"_index":49,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["atenciosamente",{"_index":604,"title":{},"body":{"injectables/UserService.html":{}}}],["atualiza",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["atualizada",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["atualizando",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["autentica",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autenticado",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autenticação",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":419,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["auth.service",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":147,"title":{},"body":{"modules/AppointmentsModule.html":{},"modules/UserModule.html":{}}}],["auth/auth.service",{"_index":444,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["auth/login",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth/password",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth/profile",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth/recover",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth/register",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth:config.auth",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":88,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":14,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":825,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":203,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"interfaces/user.html":{}}}],["authservice,jwtmodule",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["authservice,jwtstrategy",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["autorizadas",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":119,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":758,"title":{},"body":{"index.html":{}}}],["backers",{"_index":820,"title":{},"body":{"index.html":{}}}],["based",{"_index":752,"title":{},"body":{"index.html":{}}}],["bcryptjs",{"_index":525,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bearer",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerauth",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bem",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["binary",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["board",{"_index":812,"title":{},"body":{"index.html":{}}}],["body",{"_index":77,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["breve",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["browse",{"_index":835,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":833,"title":{},"body":{"modules.html":{}}}],["building",{"_index":771,"title":{},"body":{"index.html":{}}}],["busca",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["campo",{"_index":305,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["caracteres",{"_index":109,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["catch",{"_index":124,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["channel",{"_index":785,"title":{},"body":{"index.html":{}}}],["check",{"_index":746,"title":{},"body":{"index.html":{}}}],["cibatech@gmail.com",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":39,"title":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"classes/ValidationError.html":{}},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["classe",{"_index":271,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["classes",{"_index":269,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"classes/ValidationError.html":{},"overview.html":{}}}],["classification",{"_index":704,"title":{},"body":{"index.html":{}}}],["clearfaceapi",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clicks",{"_index":768,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":751,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentsmodule",{"_index":142,"title":{},"body":{"modules/AppointmentsModule.html":{},"overview.html":{}}}],["cluster_appointmentsmodule_providers",{"_index":143,"title":{},"body":{"modules/AppointmentsModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_imagesmodule",{"_index":370,"title":{},"body":{"modules/ImagesModule.html":{}}}],["cluster_imagesmodule_providers",{"_index":371,"title":{},"body":{"modules/ImagesModule.html":{}}}],["cluster_usermodule",{"_index":504,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_imports",{"_index":506,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":505,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["code}`//retornando",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["codigo",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["com",{"_index":275,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["come",{"_index":776,"title":{},"body":{"index.html":{}}}],["compare",{"_index":523,"title":{},"body":{"injectables/UserService.html":{}}}],["compare(password,user.password",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["components",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["components/schemas/appointment",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["components/schemas/image",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["components/schemas/user",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["computer",{"_index":708,"title":{},"body":{"index.html":{}}}],["concluído",{"_index":365,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configurações",{"_index":689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["console.log(\"file",{"_index":358,"title":{},"body":{"controllers/ImagesController.html":{}}}],["console.log(\"image\",image",{"_index":363,"title":{},"body":{"controllers/ImagesController.html":{}}}],["console.log(\"jwtservice",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["console.log(a",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(email+password",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(payload",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["console.log(response",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(token",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({id,username",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":94,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["constructor",{"_index":155,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{}}}],["constructor(entityname",{"_index":291,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["constructor(jwtservice",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(message",{"_index":616,"title":{},"body":{"classes/ValidationError.html":{}}}],["constructor(prisma",{"_index":156,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":91,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["consulta",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consultar",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consultas",{"_index":46,"title":{},"body":{"controllers/AppointmentsController.html":{},"miscellaneous/variables.html":{}}}],["consultas/user",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consultas/{id",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contact",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contato",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["contendo",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["content",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuar",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["controller",{"_index":42,"title":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":445,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('consultas",{"_index":90,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["controller('images",{"_index":348,"title":{},"body":{"controllers/ImagesController.html":{}}}],["controllers",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["conversão",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["courses",{"_index":791,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":619,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":152,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{}}}],["create(data",{"_index":159,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{}}}],["create(data:prisma.appointmentuncheckedcreateinput",{"_index":171,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["create(data:prisma.imageuncheckedcreateinput",{"_index":386,"title":{},"body":{"injectables/ImagesService.html":{}}}],["create(data:prisma.usercreateinput",{"_index":534,"title":{},"body":{"injectables/UserService.html":{}}}],["createappointment",{"_index":50,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["createappointment(@req",{"_index":93,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["createappointment(req",{"_index":53,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["created_at",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["created_at:true",{"_index":189,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/UserService.html":{}}}],["createimage",{"_index":333,"title":{},"body":{"controllers/ImagesController.html":{}}}],["createimage(@uploadedfile",{"_index":351,"title":{},"body":{"controllers/ImagesController.html":{}}}],["createimage(file",{"_index":335,"title":{},"body":{"controllers/ImagesController.html":{}}}],["createtransport",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cria",{"_index":294,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["criada",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["criar",{"_index":284,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"miscellaneous/variables.html":{}}}],["cuid",{"_index":115,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["código",{"_index":589,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["da",{"_index":300,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":162,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":536,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":57,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["deeper",{"_index":787,"title":{},"body":{"index.html":{}}}],["default",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":59,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":736,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":756,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":747,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":767,"title":{},"body":{"index.html":{}}}],["description",{"_index":258,"title":{},"body":{"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description:\"entity",{"_index":484,"title":{},"body":{"controllers/UserController.html":{}}}],["description:\"id",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description:\"invalid",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["dest:'./uploads",{"_index":376,"title":{},"body":{"modules/ImagesModule.html":{}}}],["detection",{"_index":701,"title":{},"body":{"index.html":{}}}],["deve",{"_index":105,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["development",{"_index":721,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":798,"title":{},"body":{"index.html":{}}}],["discord",{"_index":784,"title":{},"body":{"index.html":{}}}],["dive",{"_index":786,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":620,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doestheappointmentexists",{"_index":389,"title":{},"body":{"injectables/ImagesService.html":{}}}],["doestheimageexist",{"_index":172,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["doestheuseralreadyexist",{"_index":535,"title":{},"body":{"injectables/UserService.html":{}}}],["doestheuserexists",{"_index":179,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["dotenv",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["duplicidade",{"_index":277,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["dúvidas",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["e",{"_index":596,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":731,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":744,"title":{},"body":{"index.html":{}}}],["em",{"_index":599,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":259,"title":{},"body":{"interfaces/EmailType.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["email,name,password,appointments,created_at",{"_index":539,"title":{},"body":{"injectables/UserService.html":{}}}],["email,name,password:_password,appointments,created_at",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["email,valcode",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["email:email",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["email:true",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["email@email.com",{"_index":310,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["emails",{"_index":263,"title":{},"body":{"interfaces/EmailType.html":{}}}],["emailtype",{"_index":255,"title":{"interfaces/EmailType.html":{}},"body":{"interfaces/EmailType.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encontrada",{"_index":318,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["encontrado",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensure",{"_index":742,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":802,"title":{},"body":{"index.html":{}}}],["entidade",{"_index":278,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":309,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"miscellaneous/variables.html":{}}}],["entityalreadyexistserror",{"_index":268,"title":{"classes/EntityAlreadyExistsError.html":{}},"body":{"classes/EntityAlreadyExistsError.html":{},"injectables/ImagesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entityalreadyexistserror('user',data.email",{"_index":538,"title":{},"body":{"injectables/UserService.html":{}}}],["entityalreadyexistsexception",{"_index":296,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["entitydoesnotexists",{"_index":84,"title":{"classes/EntityDoesNotExists.html":{}},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entitydoesnotexists(\"appointment\",appointment_id",{"_index":392,"title":{},"body":{"injectables/ImagesService.html":{}}}],["entitydoesnotexists(\"appointment\",id",{"_index":199,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["entitydoesnotexists(\"image\",data.user_id",{"_index":178,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["entitydoesnotexists(\"user\",data.user_id",{"_index":183,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["entitydoesnotexists(\"user\",user_id",{"_index":193,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["entitydoesnotexists('user',email",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["entitydoesnotexists('user',id",{"_index":553,"title":{},"body":{"injectables/UserService.html":{}}}],["entityname",{"_index":298,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["entre",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["envia",{"_index":687,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["enviado",{"_index":695,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["enviar",{"_index":262,"title":{},"body":{"interfaces/EmailType.html":{}}}],["equipe",{"_index":605,"title":{},"body":{"injectables/UserService.html":{}}}],["err",{"_index":125,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["err.message",{"_index":129,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["erro",{"_index":304,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":133,"title":{},"body":{"controllers/AppointmentsController.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/UserController.html":{},"classes/ValidationError.html":{},"miscellaneous/variables.html":{}}}],["error\",message",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["erros",{"_index":276,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["específico",{"_index":306,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["esperada",{"_index":316,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["essa",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["esta",{"_index":279,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["este",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["example",{"_index":297,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["example:json.parse",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exceção",{"_index":272,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["exist",{"_index":328,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["existe",{"_index":288,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":312,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["experience",{"_index":789,"title":{},"body":{"index.html":{}}}],["expirar",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["expiresin",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"interfaces/user.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":83,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":336,"title":{},"body":{"controllers/ImagesController.html":{}}}],["extends",{"_index":290,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/ValidationError.html":{}}}],["extractjwt",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["face",{"_index":700,"title":{},"body":{"index.html":{}}}],["faceimage",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facial",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fast",{"_index":761,"title":{},"body":{"index.html":{}}}],["favor",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["faz",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":772,"title":{},"body":{"index.html":{}}}],["few",{"_index":763,"title":{},"body":{"index.html":{}}}],["file",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["file.path",{"_index":354,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file:express.multer.file",{"_index":352,"title":{},"body":{"controllers/ImagesController.html":{}}}],["fileinterceptor",{"_index":346,"title":{},"body":{"controllers/ImagesController.html":{}}}],["findappointmentbyid",{"_index":51,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["findappointmentbyid(@param('id",{"_index":139,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["findappointmentbyid(id",{"_index":67,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["findappointmentsbyuser",{"_index":52,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["findappointmentsbyuser(@req",{"_index":135,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["findappointmentsbyuser(req",{"_index":72,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["findmanybyuser",{"_index":153,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["findmanybyuser(user_id",{"_index":164,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["findmanybyuser(user_id:string",{"_index":191,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["findunique",{"_index":154,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["findunique(id",{"_index":167,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["findunique(id:string",{"_index":196,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["focus",{"_index":770,"title":{},"body":{"index.html":{}}}],["foi",{"_index":320,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["follow",{"_index":806,"title":{},"body":{"index.html":{}}}],["format",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format:\"cuid",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formato",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["found",{"_index":485,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":712,"title":{},"body":{"index.html":{}}}],["full",{"_index":801,"title":{},"body":{"index.html":{}}}],["funcking",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["function",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":681,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":766,"title":{},"body":{"index.html":{}}}],["generate",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["generatetoken",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(undefined",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken({id,name}:user",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["genvalidationcode",{"_index":529,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gerado",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(':id",{"_index":69,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["get('appointment/:appointment_id",{"_index":340,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('profile",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["get('user",{"_index":134,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["getting",{"_index":698,"title":{"index.html":{}},"body":{}}],["gmail",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":794,"title":{},"body":{"index.html":{}}}],["grow",{"_index":816,"title":{},"body":{"index.html":{}}}],["hands",{"_index":788,"title":{},"body":{"index.html":{}}}],["handy",{"_index":777,"title":{},"body":{"index.html":{}}}],["hash",{"_index":524,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(newpassword,9",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["hash(password,9",{"_index":541,"title":{},"body":{"injectables/UserService.html":{}}}],["hashing",{"_index":542,"title":{},"body":{"injectables/UserService.html":{}}}],["havera",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["help",{"_index":792,"title":{},"body":{"index.html":{}}}],["here",{"_index":482,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["host",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host:config.host",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host:z.string",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":829,"title":{},"body":{"index.html":{}}}],["https://opensource.org/licenses/mit",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":71,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["id,username",{"_index":95,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["id:appointment_id",{"_index":390,"title":{},"body":{"injectables/ImagesService.html":{}}}],["id:data.image_id",{"_index":174,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["id:data.user_id",{"_index":181,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["id:false",{"_index":547,"title":{},"body":{"injectables/UserService.html":{}}}],["id:true",{"_index":186,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/UserService.html":{}}}],["id:user.id,name:user.name",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["id:user_id",{"_index":192,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["id:z.string({message:\"payload",{"_index":97,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["identificador",{"_index":321,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["identifier",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["if(!appointment",{"_index":198,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["if(!doestheappointmentexists",{"_index":391,"title":{},"body":{"injectables/ImagesService.html":{}}}],["if(!doestheimageexist",{"_index":175,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["if(!doestheuserexists",{"_index":182,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["if(!passwordmatch",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["if(!user",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["if(doestheuseralreadyexist",{"_index":537,"title":{},"body":{"injectables/UserService.html":{}}}],["if(err",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["if(refcode",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["ignore",{"_index":594,"title":{},"body":{"injectables/UserService.html":{}}}],["ignoreexpiration",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":361,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["image_id",{"_index":111,"title":{},"body":{"controllers/AppointmentsController.html":{},"miscellaneous/variables.html":{}}}],["image_id\":\"cm8ndt8y20000ilfsohp3jiwx",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_id'}).cuid(\"image_id",{"_index":114,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["image_id,user_id:id",{"_index":121,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["image_id:z.string({message:'need",{"_index":112,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["imagem",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imagens",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["images",{"_index":332,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["images.controller",{"_index":373,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.service",{"_index":345,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["images/appointment/{appointment_id",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imagescontroller",{"_index":330,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imageservice",{"_index":349,"title":{},"body":{"controllers/ImagesController.html":{}}}],["imagesmodule",{"_index":15,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules.html":{},"overview.html":{}}}],["imagesservice",{"_index":17,"title":{"injectables/ImagesService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"coverage.html":{},"overview.html":{}}}],["implementar",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["implements",{"_index":415,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{}}}],["imports:[authmodule",{"_index":509,"title":{},"body":{"modules/UserModule.html":{}}}],["in:\"header\",name:\"jwt",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incorreta",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["inexistente",{"_index":315,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["info",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":749,"title":{},"body":{"index.html":{}}}],["informações",{"_index":693,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["informe",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["infrastructure",{"_index":774,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":149,"title":{"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["injectables",{"_index":150,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inputstring",{"_index":697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["install",{"_index":765,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":719,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":126,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["instância",{"_index":295,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["interact",{"_index":795,"title":{},"body":{"index.html":{}}}],["interface",{"_index":237,"title":{"interfaces/EmailType.html":{},"interfaces/user.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["interfaces",{"_index":256,"title":{},"body":{"interfaces/EmailType.html":{},"overview.html":{},"interfaces/user.html":{}}}],["internal",{"_index":131,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["interno",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalido",{"_index":99,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["invalido\"}).min(3,\"payload",{"_index":103,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["invalido\"}).uuid(\"payload",{"_index":98,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["inválida",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inválido",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["items",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["j",{"_index":287,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"miscellaneous/variables.html":{}}}],["job",{"_index":809,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":811,"title":{},"body":{"index.html":{}}}],["join",{"_index":822,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt\",schema:{type:\"string",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_expires_in",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_expires_in:z.string",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtestrategy.service",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["jwtstrategy",{"_index":204,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":826,"title":{},"body":{"index.html":{}}}],["key",{"_index":739,"title":{},"body":{"index.html":{}}}],["lançada",{"_index":280,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["learn",{"_index":780,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["lerning",{"_index":707,"title":{},"body":{"index.html":{}}}],["license",{"_index":832,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["licensed",{"_index":814,"title":{},"body":{"index.html":{}}}],["lidar",{"_index":274,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["linkedin",{"_index":808,"title":{},"body":{"index.html":{}}}],["lista",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localizar",{"_index":327,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["logged",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["login",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["looking",{"_index":750,"title":{},"body":{"index.html":{}}}],["loop",{"_index":804,"title":{},"body":{"index.html":{}}}],["lts.2",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["lógica",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["machine",{"_index":706,"title":{},"body":{"index.html":{}}}],["mail",{"_index":597,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["makes",{"_index":759,"title":{},"body":{"index.html":{}}}],["managing",{"_index":773,"title":{},"body":{"index.html":{}}}],["mas",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":754,"title":{},"body":{"index.html":{}}}],["message",{"_index":128,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{},"classes/ValidationError.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":48,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":680,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":813,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":724,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/appointments/appointments.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/auth.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/images/images.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/images/images.service",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.service",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":748,"title":{},"body":{"index.html":{}}}],["motivos",{"_index":602,"title":{},"body":{"injectables/UserService.html":{}}}],["multer",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["multermodule",{"_index":374,"title":{},"body":{"modules/ImagesModule.html":{}}}],["multermodule.register",{"_index":375,"title":{},"body":{"modules/ImagesModule.html":{}}}],["multipart/form",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":827,"title":{},"body":{"index.html":{}}}],["mínimo",{"_index":107,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["na",{"_index":325,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["name",{"_index":62,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["name:\"auth\",description:\"rotas",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name:\"consultas\",description:\"rotas",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name:\"imagens\",description:\"rotas",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name:true",{"_index":548,"title":{},"body":{"injectables/UserService.html":{}}}],["nao",{"_index":100,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":799,"title":{},"body":{"index.html":{}}}],["nest",{"_index":711,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":831,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":737,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"interfaces/user.html":{}}}],["nestjs/core",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"interfaces/user.html":{}}}],["nestjs/passport",{"_index":89,"title":{},"body":{"controllers/AppointmentsController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":347,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":177,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newpassword",{"_index":494,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nodemailer",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["nome",{"_index":299,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["nova",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["novo",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":718,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["não",{"_index":317,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["número",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["o",{"_index":303,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objeto",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obter",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ocorreu",{"_index":302,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["offer",{"_index":810,"title":{},"body":{"index.html":{}}}],["official",{"_index":755,"title":{},"body":{"index.html":{}}}],["ol",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["onde",{"_index":301,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["onmoduleinit",{"_index":413,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":815,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openapiobject",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":64,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["ou",{"_index":322,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["outras",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":836,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":649,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padrão",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["para",{"_index":261,"title":{},"body":{"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":76,"title":{},"body":{"controllers/AppointmentsController.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{}}}],["parameters",{"_index":61,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["parse(body",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["parse(process.env",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parse(req.body",{"_index":116,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["parse(req.user",{"_index":110,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["part",{"_index":800,"title":{},"body":{"index.html":{}}}],["pass",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":87,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":394,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":449,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password\",message",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["password:await",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["password:false",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["password:true",{"_index":555,"title":{},"body":{"injectables/UserService.html":{}}}],["passwordmatch",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["path",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paths",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/user.html":{}}}],["payload.sub",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/user.html":{}}}],["payload.username",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/user.html":{}}}],["pelo",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perfil",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["personalizada",{"_index":273,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["platform",{"_index":753,"title":{},"body":{"index.html":{}}}],["please",{"_index":783,"title":{},"body":{"index.html":{}}}],["pode",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["por",{"_index":601,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["port:587",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port:config.port",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port:z.string",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["porta",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":745,"title":{},"body":{"index.html":{}}}],["post",{"_index":75,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["post(\"login",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["post(\"recover",{"_index":500,"title":{},"body":{"controllers/UserController.html":{}}}],["post(\"register",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":429,"title":{},"body":{"controllers/UserController.html":{}}}],["post('recover",{"_index":435,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":426,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":45,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":158,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma.appointmentuncheckedcreateinput",{"_index":160,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["prisma.imageuncheckedcreateinput",{"_index":381,"title":{},"body":{"injectables/ImagesService.html":{}}}],["prisma.usercreateinput",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":169,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma:prismaservice",{"_index":170,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{}}}],["prismaclient",{"_index":412,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":18,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["privatekey:jwt_secret",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["production",{"_index":726,"title":{},"body":{"index.html":{}}}],["produção",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["profile",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["project",{"_index":716,"title":{},"body":{"index.html":{}}}],["promise",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["properties",{"_index":264,"title":{"properties.html":{}},"body":{"interfaces/EmailType.html":{},"properties.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":113,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers:[prismaservice,imagesservice",{"_index":377,"title":{},"body":{"modules/ImagesModule.html":{}}}],["put",{"_index":440,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["put(\"password",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["put('password",{"_index":438,"title":{},"body":{"controllers/UserController.html":{}}}],["quando",{"_index":281,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["que",{"_index":286,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["questions",{"_index":781,"title":{},"body":{"index.html":{}}}],["read",{"_index":823,"title":{},"body":{"index.html":{}}}],["ready",{"_index":735,"title":{},"body":{"index.html":{}}}],["real",{"_index":796,"title":{},"body":{"index.html":{}}}],["recebemos",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["reconhecimento",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recoverycode",{"_index":502,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["recstring",{"_index":493,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["recuperação",{"_index":579,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["recusado",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redefinir",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["redes",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refcode",{"_index":495,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["referência",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["registeruser",{"_index":420,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(@req",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(req",{"_index":425,"title":{},"body":{"controllers/UserController.html":{}}}],["registrado",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registro",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rejectunauthorized:false",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reply",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":715,"title":{},"body":{"index.html":{}}}],["req",{"_index":65,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["req:request",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":54,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["requestbody",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required:[\"image_id",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required:true",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiring",{"_index":762,"title":{},"body":{"index.html":{}}}],["res",{"_index":55,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["res.status(200).json",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(200).json(appointment",{"_index":141,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["res.status(200).json(appointments",{"_index":138,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["res.status(200).json(images",{"_index":369,"title":{},"body":{"controllers/ImagesController.html":{}}}],["res.status(201).json(appointment",{"_index":123,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["res.status(201).json(response",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(201).json({description:\"upload",{"_index":364,"title":{},"body":{"controllers/ImagesController.html":{}}}],["res.status(400).json",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(401).json",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(404).json",{"_index":127,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["res.status(409).json",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["res.status(500).json",{"_index":130,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources",{"_index":775,"title":{},"body":{"index.html":{}}}],["response",{"_index":56,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["responses",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resultado",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resultado:false",{"_index":188,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["resultado:null",{"_index":122,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["resultado:true",{"_index":195,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["results",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retornadas",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retornado",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["return",{"_index":190,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["returnbyappointmentid",{"_index":379,"title":{},"body":{"injectables/ImagesService.html":{}}}],["returnbyappointmentid(appointment_id",{"_index":383,"title":{},"body":{"injectables/ImagesService.html":{}}}],["returnbyappointmentid(appointment_id:string",{"_index":388,"title":{},"body":{"injectables/ImagesService.html":{}}}],["returned",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["returnidafterlogin",{"_index":421,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returnidafterlogin(@body",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["returnidafterlogin(body",{"_index":428,"title":{},"body":{"controllers/UserController.html":{}}}],["returnidafterlogin(email",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["returnidafterlogin(email:string,password:string",{"_index":554,"title":{},"body":{"injectables/UserService.html":{}}}],["returnimagesbyappointmentid",{"_index":334,"title":{},"body":{"controllers/ImagesController.html":{}}}],["returnimagesbyappointmentid(@param('appointment_id",{"_index":367,"title":{},"body":{"controllers/ImagesController.html":{}}}],["returnimagesbyappointmentid(appointment_id",{"_index":339,"title":{},"body":{"controllers/ImagesController.html":{}}}],["returnprofile",{"_index":422,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returnprofile(@req",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["returnprofile(id",{"_index":517,"title":{},"body":{"injectables/UserService.html":{}}}],["returnprofile(id:string",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["returnprofile(req",{"_index":431,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":66,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":720,"title":{},"body":{"index.html":{}}}],["runs",{"_index":743,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schemas",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scheme",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scr",{"_index":355,"title":{},"body":{"controllers/ImagesController.html":{}}}],["se",{"_index":282,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"injectables/UserService.html":{}}}],["secret",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure:465",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure:false",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["securityschemes",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["segurança",{"_index":603,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":185,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/UserService.html":{}}}],["sendemail",{"_index":527,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sendemail(_email",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["sendemail(email",{"_index":686,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sendrecoverycode",{"_index":423,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["sendrecoverycode(@body",{"_index":501,"title":{},"body":{"controllers/UserController.html":{}}}],["sendrecoverycode(body",{"_index":434,"title":{},"body":{"controllers/UserController.html":{}}}],["sendrecoverycode(email",{"_index":519,"title":{},"body":{"injectables/UserService.html":{}}}],["sendrecoverycode(email:string",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["senha",{"_index":456,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["ser",{"_index":694,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":132,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["servidor",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":717,"title":{},"body":{"index.html":{}}}],["shared/prisma/prisma.service",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["signoptions",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":764,"title":{},"body":{"index.html":{}}}],["sistema",{"_index":289,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["smtp.gmail.com",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solicitação",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["solicitou",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["source",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentsController.html":{},"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"index.html":{},"interfaces/user.html":{}}}],["splitstringatdash",{"_index":531,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["splitstringatdash(inputstring",{"_index":696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["splitstringatdash(recstring",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["sponsors",{"_index":818,"title":{},"body":{"index.html":{}}}],["src/.../genvalidcode.ts",{"_index":683,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../nodemailer.ts",{"_index":684,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../separatecookiestring.ts",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.ts",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/appointments/appointments.controller.ts",{"_index":44,"title":{},"body":{"controllers/AppointmentsController.html":{},"coverage.html":{}}}],["src/modules/appointments/appointments.controller.ts:15",{"_index":60,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["src/modules/appointments/appointments.controller.ts:39",{"_index":74,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["src/modules/appointments/appointments.controller.ts:56",{"_index":70,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["src/modules/appointments/appointments.module.ts",{"_index":144,"title":{},"body":{"modules/AppointmentsModule.html":{}}}],["src/modules/appointments/appointments.service.ts",{"_index":151,"title":{},"body":{"injectables/AppointmentsService.html":{},"coverage.html":{}}}],["src/modules/appointments/appointments.service.ts:11",{"_index":161,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["src/modules/appointments/appointments.service.ts:41",{"_index":165,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["src/modules/appointments/appointments.service.ts:63",{"_index":168,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["src/modules/appointments/appointments.service.ts:7",{"_index":157,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/user.html":{}}}],["src/modules/auth/auth.service.ts:11",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:17",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:6",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwtestrategy.service.ts",{"_index":393,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwtestrategy.service.ts:16",{"_index":398,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwtestrategy.service.ts:7",{"_index":396,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/images/images.controller.ts",{"_index":331,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{}}}],["src/modules/images/images.controller.ts:14",{"_index":338,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/modules/images/images.controller.ts:37",{"_index":341,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/modules/images/images.module.ts",{"_index":372,"title":{},"body":{"modules/ImagesModule.html":{}}}],["src/modules/images/images.service.ts",{"_index":378,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{}}}],["src/modules/images/images.service.ts:12",{"_index":382,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/modules/images/images.service.ts:19",{"_index":384,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/modules/images/images.service.ts:8",{"_index":380,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/modules/user/user.controller.ts",{"_index":418,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:113",{"_index":436,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:17",{"_index":427,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:38",{"_index":433,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:61",{"_index":430,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:93",{"_index":439,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":507,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":511,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:107",{"_index":520,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:15",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:18",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:34",{"_index":518,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:54",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:76",{"_index":522,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/errors/entittydoesnotexists.error",{"_index":85,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/shared/errors/entittydoesnotexists.error.ts",{"_index":314,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"coverage.html":{}}}],["src/shared/errors/entittydoesnotexists.error.ts:5",{"_index":319,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["src/shared/errors/entityalreadyexistserror.error",{"_index":385,"title":{},"body":{"injectables/ImagesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/shared/errors/entityalreadyexistserror.error.ts",{"_index":270,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"coverage.html":{}}}],["src/shared/errors/entityalreadyexistserror.error.ts:5",{"_index":293,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["src/shared/errors/validationerror.erro",{"_index":443,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/shared/errors/validationerror.erro.ts",{"_index":615,"title":{},"body":{"classes/ValidationError.html":{},"coverage.html":{}}}],["src/shared/errors/validationerror.erro.ts:1",{"_index":617,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/shared/lib/env",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["src/shared/lib/env/index.ts",{"_index":635,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/lib/nodemailer",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/lib/nodemailer.ts",{"_index":637,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/shared/prisma/prisma.service",{"_index":145,"title":{},"body":{"modules/AppointmentsModule.html":{},"injectables/AppointmentsService.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/shared/prisma/prisma.service.ts",{"_index":411,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/shared/prisma/prisma.service.ts:7",{"_index":414,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/shared/utils/genvalidcode",{"_index":530,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/utils/genvalidcode.ts",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/utils/separatecookiestring",{"_index":532,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/utils/separatecookiestring.ts",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/types/interfaces/emailtype",{"_index":533,"title":{},"body":{"injectables/UserService.html":{}}}],["src/types/interfaces/emailtype.ts",{"_index":257,"title":{},"body":{"interfaces/EmailType.html":{},"coverage.html":{}}}],["src/types/swagger.ts",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ssl",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":722,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":725,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":727,"title":{},"body":{"index.html":{}}}],["started",{"_index":699,"title":{"index.html":{}},"body":{}}],["starter",{"_index":714,"title":{},"body":{"index.html":{}}}],["starttls",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":803,"title":{},"body":{"index.html":{}}}],["steps",{"_index":740,"title":{},"body":{"index.html":{}}}],["stored",{"_index":359,"title":{},"body":{"controllers/ImagesController.html":{}}}],["straightforward",{"_index":760,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":68,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["sua",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["sub:id",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["subject",{"_index":265,"title":{},"body":{"interfaces/EmailType.html":{}}}],["subject:\"no",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["subject:string",{"_index":267,"title":{},"body":{"interfaces/EmailType.html":{}}}],["successfully",{"_index":470,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["sucedido",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sucesso",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sucesso\",image,body",{"_index":366,"title":{},"body":{"controllers/ImagesController.html":{}}}],["summary",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(`entity",{"_index":313,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{}}}],["super(message",{"_index":618,"title":{},"body":{"classes/ValidationError.html":{}}}],["suporte",{"_index":606,"title":{},"body":{"injectables/UserService.html":{}}}],["support",{"_index":782,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":834,"title":{},"body":{"modules.html":{}}}],["swaggerdocument",{"_index":646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["take",{"_index":741,"title":{},"body":{"index.html":{}}}],["techniques",{"_index":710,"title":{},"body":{"index.html":{}}}],["tenta",{"_index":283,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{}}}],["tentativa",{"_index":326,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["ter",{"_index":106,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["test",{"_index":730,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":733,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":732,"title":{},"body":{"index.html":{}}}],["tests",{"_index":728,"title":{},"body":{"index.html":{}}}],["text",{"_index":266,"title":{},"body":{"interfaces/EmailType.html":{},"injectables/UserService.html":{}}}],["thanks",{"_index":817,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":416,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appointmentsservice.create",{"_index":120,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["this.appointmentsservice.findmanybyuser(id",{"_index":137,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["this.appointmentsservice.findunique(id",{"_index":140,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["this.authservice.generatetoken({id:response.id,name:response.name",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["this.imageservice.create",{"_index":362,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imageservice.returnbyappointmentid(appointment_id",{"_index":368,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.jwtservice",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["this.jwtservice.sign(payload",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["this.name",{"_index":329,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ValidationError.html":{}}}],["this.prisma.appointment.create",{"_index":184,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["this.prisma.appointment.findmany",{"_index":194,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["this.prisma.appointment.findunique",{"_index":197,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{}}}],["this.prisma.image.create",{"_index":387,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.prisma.image.findunique",{"_index":173,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["this.prisma.user.create({data:_data",{"_index":545,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":180,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.returnidafterlogin(email",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.returnprofile(id",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.sendrecoverycode(email",{"_index":503,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatepasswordbyreccode(recstring",{"_index":497,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":176,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":797,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title:\"image",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tls",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to:email",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["todas",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":477,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["token\",required:true,description:\"bearer",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":824,"title":{},"body":{"index.html":{}}}],["transport",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["transporte",{"_index":690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["try",{"_index":117,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["twitter",{"_index":830,"title":{},"body":{"index.html":{}}}],["type",{"_index":63,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AppointmentsService.html":{},"injectables/AuthService.html":{},"interfaces/EmailType.html":{},"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["type:\"string",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type:'string',format:'cuid",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/bcryptjs",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":713,"title":{},"body":{"index.html":{}}}],["um",{"_index":453,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uma",{"_index":285,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":729,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":163,"title":{},"body":{"injectables/AppointmentsService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":841,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":498,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["updated_at",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated_at:true",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepasswordbyreccode",{"_index":424,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatepasswordbyreccode(@body",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["updatepasswordbyreccode(body",{"_index":437,"title":{},"body":{"controllers/UserController.html":{}}}],["updatepasswordbyreccode(recstring",{"_index":521,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepasswordbyreccode(recstring:string,newpassword:string,refcode:string",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":805,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":357,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["uploadedfile",{"_index":344,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uri',description:\"url",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":353,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["url:\",url",{"_index":360,"title":{},"body":{"controllers/ImagesController.html":{}}}],["usado",{"_index":324,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["use",{"_index":86,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/JwtStrategy.html":{}}}],["useguards",{"_index":78,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":92,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('profile",{"_index":432,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('user",{"_index":73,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["useguards(undefined)@post",{"_index":58,"title":{},"body":{"controllers/AppointmentsController.html":{}}}],["useinterceptors",{"_index":343,"title":{},"body":{"controllers/ImagesController.html":{}}}],["useinterceptors(fileinterceptor('faceimage",{"_index":350,"title":{},"body":{"controllers/ImagesController.html":{}}}],["useinterceptors(undefined)@post",{"_index":337,"title":{},"body":{"controllers/ImagesController.html":{}}}],["user",{"_index":231,"title":{"interfaces/user.html":{}},"body":{"injectables/AuthService.html":{},"classes/EntityAlreadyExistsError.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":508,"title":{},"body":{"modules/UserModule.html":{}}}],["user.name",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":441,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user_id",{"_index":166,"title":{},"body":{"injectables/AppointmentsService.html":{},"miscellaneous/variables.html":{}}}],["user_id:false",{"_index":187,"title":{},"body":{"injectables/AppointmentsService.html":{}}}],["usercontroller",{"_index":417,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":104,"title":{},"body":{"controllers/AppointmentsController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"interfaces/user.html":{}}}],["username:z.string({message:\"payload",{"_index":102,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{}}}],["userservice",{"_index":19,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice,prismaservice,authservice",{"_index":510,"title":{},"body":{"modules/UserModule.html":{}}}],["userservice,private",{"_index":446,"title":{},"body":{"controllers/UserController.html":{}}}],["user{id:string,name:string",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["using",{"_index":705,"title":{},"body":{"index.html":{}}}],["usuário",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["utilizada",{"_index":260,"title":{},"body":{"interfaces/EmailType.html":{}}}],["utilizando",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utilize",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["uuid",{"_index":101,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["valcode",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["validate",{"_index":395,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":397,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/user.html":{}}}],["validationerror",{"_index":442,"title":{"classes/ValidationError.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["validationerror('invalid",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["validação",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["valor",{"_index":323,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["value",{"_index":292,"title":{},"body":{"classes/EntityAlreadyExistsError.html":{},"classes/EntityDoesNotExists.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":842,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variáveis",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":839,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["video",{"_index":790,"title":{},"body":{"index.html":{}}}],["vision",{"_index":709,"title":{},"body":{"index.html":{}}}],["visit",{"_index":779,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":793,"title":{},"body":{"index.html":{}}}],["voc",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"interfaces/user.html":{}}}],["válido",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["watch",{"_index":723,"title":{},"body":{"index.html":{}}}],["website",{"_index":828,"title":{},"body":{"index.html":{}}}],["working",{"_index":778,"title":{},"body":{"index.html":{}}}],["x",{"_index":807,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":821,"title":{},"body":{"index.html":{}}}],["you're",{"_index":734,"title":{},"body":{"index.html":{}}}],["z",{"_index":81,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{}}}],["z.object",{"_index":96,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["z.string",{"_index":496,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["z.string().email(\"por",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["z.string().min(3",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["z.string().min(6",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["z0",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zod",{"_index":82,"title":{},"body":{"controllers/AppointmentsController.html":{},"controllers/ImagesController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["zoom",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentsModule.html":{},"modules/AuthModule.html":{},"modules/ImagesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppointmentsModule\n\nAppointmentsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nAppModule -->\n\nImagesService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppointmentsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './shared/prisma/prisma.service';\nimport { UserService } from './modules/user/user.service';\nimport { UserModule } from './modules/user/user.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { AppointmentsModule } from './modules/appointments/appointments.module';\nimport { ImagesModule } from './modules/images/images.module';\nimport { ImagesService } from './modules/images/images.service';\n\n\n\n@Module({\n  imports: [UserModule, AuthModule, AppointmentsModule, ImagesModule],\n  controllers: [],\n  providers: [PrismaService, UserService, ImagesService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentsController.html":{"url":"controllers/AppointmentsController.html","title":"controller - AppointmentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointments/appointments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                consultas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createAppointment\n                            \n                            \n                                    \n                                    Async\n                                findAppointmentById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAppointmentsByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createAppointment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAppointment(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointments/appointments.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAppointmentById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAppointmentById(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointments/appointments.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAppointmentsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAppointmentsByUser(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('user')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointments/appointments.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Param, Body, Res, UseGuards, Req } from '@nestjs/common';\nimport { AppointmentsService } from './appointments.service';\nimport { z } from 'zod';\nimport { Response, Request } from 'express';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { use } from 'passport';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('consultas')\nexport class AppointmentsController {\n    constructor(private appointmentsService: AppointmentsService) {}\n\n    @UseGuards(AuthGuard('jwt'))\n    @Post()\n    async createAppointment(@Req() req: Request, @Res() res: Response) {\n        const {id,username} = z.object({\n            id:z.string({message:\"Payload invalido\"}).uuid(\"payload invalido: id nao é uuid\"),\n            username:z.string({message:\"Payload invalido\"}).min(3,\"Payload invalido: username deve ter no mínimo 3 caracteres\"),\n            \n        }).parse(req.user);\n        const {image_id} = z.object({\n            image_id:z.string({message:'Need to provide a image_id'}).cuid(\"image_id invalido (cuid)\")\n        }).parse(req.body);\n        try {\n            const appointment = await this.appointmentsService.create({ image_id,user_id:id, resultado:null });\n            res.status(201).json(appointment);\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n\n    @UseGuards(AuthGuard('jwt'))\n    @Get('user')\n    async findAppointmentsByUser(@Req() req: Request, @Res() res: Response) {\n        const {id} = z.object({\n            id:z.string({message:\"Payload invalido\"}).uuid(\"payload invalido: id nao é uuid\")}\n        ).parse(req.user);\n        try {\n            const appointments = await this.appointmentsService.findManyByUser(id);\n            res.status(200).json(appointments);\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @Get(':id')\n    async findAppointmentById(@Param('id') id: string, @Res() res: Response) {\n        try {\n            const appointment = await this.appointmentsService.findUnique(id);\n            res.status(200).json(appointment);\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentsModule.html":{"url":"modules/AppointmentsModule.html","title":"module - AppointmentsModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentsModule\n\n\n\ncluster_AppointmentsModule_providers\n\n\n\n\nAppointmentsService\n\nAppointmentsService\n\n\n\nAppointmentsModule\n\nAppointmentsModule\n\nAppointmentsModule -->\n\nAppointmentsService->AppointmentsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppointmentsModule -->\n\nPrismaService->AppointmentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointments/appointments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppointmentsService } from './appointments.service';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { AppointmentsController } from './appointments.controller';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  providers: [AppointmentsService,PrismaService],\n  controllers: [AppointmentsController],\n})\nexport class AppointmentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentsService.html":{"url":"injectables/AppointmentsService.html","title":"injectable - AppointmentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointments/appointments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findManyByUser\n                            \n                            \n                                    Async\n                                findUnique\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointments/appointments.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Prisma.AppointmentUncheckedCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointments/appointments.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.AppointmentUncheckedCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findManyByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findManyByUser(user_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointments/appointments.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUnique\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUnique(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointments/appointments.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\n\n@Injectable()\nexport class AppointmentsService {\n\n    constructor(private prisma:PrismaService){}\n\n    async create(data:Prisma.AppointmentUncheckedCreateInput) {\n        const doesTheImageExist = await this.prisma.image.findUnique({\n            where:{\n                id:data.image_id\n            }\n        })\n        if(!doesTheImageExist){\n            throw new EntityDoesNotExists(\"Image\",data.user_id)\n        }\n        const doesTheUserExists = await this.prisma.user.findUnique({\n            where:{\n                id:data.user_id\n            }\n        })\n        if(!doesTheUserExists){\n            throw new EntityDoesNotExists(\"User\",data.user_id)\n        }\n        const appointment = await this.prisma.appointment.create({\n            data,\n            select:{\n                id:true,\n                user_id:false,\n                resultado:false,\n                created_at:true\n            }\n        });\n\n        return appointment;\n    }\n\n    async findManyByUser(user_id:string) {\n        const doesTheUserExists = await this.prisma.user.findUnique({\n            where:{\n                id:user_id\n            }\n        })\n        if(!doesTheUserExists){\n            throw new EntityDoesNotExists(\"User\",user_id)\n        }\n        return await this.prisma.appointment.findMany({\n            where:{\n                user_id\n            },\n            select:{\n                id:true,\n                user_id:false,\n                resultado:true,\n                created_at:true\n            }\n        });\n    }\n\n    async findUnique(id:string){\n        const appointment = await this.prisma.appointment.findUnique({\n            where:{\n                id\n            },\n            select:{\n                id:true,\n                user_id:false,\n                resultado:true,\n                created_at:true\n            }\n        });\n        if(!appointment){\n            throw new EntityDoesNotExists(\"Appointment\",id)\n        }\n        return appointment;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JWT_EXPIRES_IN, JWT_SECRET } from 'src/shared/lib/env';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwtEstrategy.service';\n\n@Module({\n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.register({\n          secret: JWT_SECRET,\n          privateKey:JWT_SECRET,\n          signOptions: { expiresIn: JWT_EXPIRES_IN,},\n        }),\n      ],\n    providers: [AuthService,JwtStrategy],\n    exports: [AuthService,JwtModule],\n    \n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtservice: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtservice\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(undefined: user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            user\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\ninterface user{id:string,name:string}\n@Injectable()\nexport class AuthService {\n  constructor(private jwtservice: JwtService) {\n    // console.log(\"jwtservice:\", this.jwtservice);\n  }\n\n  async generateToken({id,name}:user): Promise {\n    const payload = { username: name, sub:id };\n    console.log(payload)\n    return this.jwtservice.sign(payload);\n  }\n\n  async validateUser(payload: any): Promise {\n    // Aqui você pode implementar a lógica de validação do usuário\n    return { id: payload.sub, name: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EmailType.html":{"url":"interfaces/EmailType.html","title":"interface - EmailType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EmailType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/emailType.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface de email utilizada para enviar emails\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EmailType{\n    text: string\n    to: string \n    subject:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityAlreadyExistsError.html":{"url":"classes/EntityAlreadyExistsError.html","title":"class - EntityAlreadyExistsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityAlreadyExistsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/errors/EntityAlreadyExistsError.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Classe de exceção personalizada para lidar com erros de duplicidade de entidade.\nEsta exceção é lançada quando se tenta criar uma entidade que já existe no sistema.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityName: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/errors/EntityAlreadyExistsError.error.ts:5\n                            \n                        \n\n                \n                    \n                            Cria uma instância de EntityAlreadyExistsException.\nExample :\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entityName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nNome da entidade onde ocorreu o erro.\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nCampo específico da entidade associado ao erro.\n\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            \"Entity User with email@email.com already exists\"\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EntityAlreadyExistsError extends Error {\n     /**\n     * Cria uma instância de EntityAlreadyExistsException.\n     * \n     * @param entityName - Nome da entidade onde ocorreu o erro.\n     * @param value - Campo específico da entidade associado ao erro.\n     * @example \"Entity User with email@email.com already exists\"\n     */\n    constructor(entityName: string, value: string) {\n        super(`Entity ${entityName} with ${value} already exists`);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityDoesNotExists.html":{"url":"classes/EntityDoesNotExists.html","title":"class - EntityDoesNotExists","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityDoesNotExists\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/errors/EntittyDoesNotExists.error.ts\n        \n\n\n            \n                Description\n            \n            \n                Classe de exceção personalizada para lidar com erros de entidade inexistente.\nEsta exceção é lançada quando uma entidade esperada não é encontrada no sistema.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityName: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/errors/EntittyDoesNotExists.error.ts:5\n                            \n                        \n\n                \n                    \n                            Cria uma instância de EntityDoesNotExists.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entityName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nNome da entidade que não foi encontrada.\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nIdentificador ou valor usado na tentativa de localizar a entidade.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EntityDoesNotExists extends Error {\n    /**\n     * Cria uma instância de EntityDoesNotExists.\n     * \n     * @param entityName - Nome da entidade que não foi encontrada.\n     * @param value - Identificador ou valor usado na tentativa de localizar a entidade.\n     */\n    constructor(entityName: string, value: string) {\n        super(`Entity ${entityName} with ${value} does not exist`);\n        this.name = 'EntityDoesNotExists';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/images/images.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                images\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createImage\n                            \n                            \n                                    \n                                    Async\n                                returnImagesByAppointmentId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImage(file: Express.Multer.File, body: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/images/images.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        returnImagesByAppointmentId\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnImagesByAppointmentId(appointment_id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('appointment/:appointment_id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/images/images.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointment_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Param, Body, Res, UseInterceptors, UploadedFile } from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { z } from 'zod';\nimport { Response } from 'express';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n@Controller('images')\nexport class ImagesController {\n    constructor(private ImageService: ImagesService) {}\n\n    @UseInterceptors(FileInterceptor('FaceImage')) \n    @Post()\n    async createImage(@UploadedFile() file:Express.Multer.File, @Body() body: any, @Res() res: Response) {\n\n\n        const url = file.path; //scr do file após upload\n        console.log(\"file stored URL:\",url)\n\n        try {\n            const image = await this.ImageService.create({ url });\n            \n            console.log(\"image\",image)\n\n            res.status(201).json({Description:\"Upload concluído com sucesso\",image,body});\n\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: err.message });\n            }\n        }\n    }\n\n    @Get('appointment/:appointment_id')\n    async returnImagesByAppointmentId(@Param('appointment_id') appointment_id: string, @Res() res: Response) {\n        try {\n            const images = await this.ImageService.returnByAppointmentId(appointment_id);\n            res.status(200).json(images);\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: err.message });\n            }\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\n\nImagesService\n\nImagesService\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nImagesModule -->\n\nPrismaService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/images/images.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { ImagesService } from './images.service';\nimport { ImagesController } from './images.controller';\nimport { MulterModule } from '@nestjs/platform-express';\n\n@Module({\n     imports:[\n          MulterModule.register({\n               dest:'./uploads'\n          })\n     ],\n     providers:[PrismaService,ImagesService],\n     controllers: [ImagesController]\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/images/images.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                returnByAppointmentId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/images/images.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Prisma.ImageUncheckedCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/images/images.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.ImageUncheckedCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        returnByAppointmentId\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnByAppointmentId(appointment_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/images/images.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointment_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { EntityAlreadyExistsError } from 'src/shared/errors/EntityAlreadyExistsError.error';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\n\n@Injectable()\nexport class ImagesService {\n    constructor(private prisma:PrismaService){}\n\n\n    async create(data:Prisma.ImageUncheckedCreateInput){\n\n        return await this.prisma.image.create({\n            data\n        })\n    }\n\n    async returnByAppointmentId(appointment_id:string){\n        const doesTheAppointmentExists = await this.prisma.appointment.findUnique({\n            where:{\n                id:appointment_id\n            }\n        })\n\n        if(!doesTheAppointmentExists){\n            throw new EntityDoesNotExists(\"appointment\",appointment_id)\n        }\n   \n        return doesTheAppointmentExists\n    }\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwtEstrategy.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwtEstrategy.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwtEstrategy.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JWT_SECRET } from 'src/shared/lib/env';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: JWT_SECRET, // ⚠️ Use variáveis de ambiente para produção\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/prisma/prisma.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit{\n    async onModuleInit() {\n        await this.$connect();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                registerUser\n                            \n                            \n                                    \n                                    Async\n                                returnIdAfterLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                returnProfile\n                            \n                            \n                                    \n                                    Async\n                                sendRecoveryCode\n                            \n                            \n                                    \n                                    Async\n                                updatePasswordByRecCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        returnIdAfterLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnIdAfterLogin(body: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        returnProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnProfile(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendRecoveryCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendRecoveryCode(body: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('recover')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updatePasswordByRecCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePasswordByRecCode(body: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Put, Req, Res, Body, UseGuards } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { z } from 'zod';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { ValidationError } from 'src/shared/errors/ValidationError.erro';\nimport { Request, Response } from 'express';\nimport { EntityAlreadyExistsError } from 'src/shared/errors/EntityAlreadyExistsError.error';\nimport { AuthService } from '../auth/auth.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('auth')\nexport class UserController {\n    \n    constructor(private UserService: UserService,private authService: AuthService) {}\n\n    @Post(\"register\")\n    async registerUser(@Req() req: Request, @Res() res: Response) {\n        const { email, name, password } = z.object({\n            email: z.string().email(\"Por favor informe um email válido\"),\n            password: z.string().min(6, \"A senha deve ter no mínimo 6 caracteres\"),\n            name: z.string().min(3, \"O nome deve ter no mínimo 3 caracteres\")\n        }).parse(req.body);\n\n        try {\n            const response = await this.UserService.create({ email, name, password });\n            res.status(201).json(response);\n        } catch (err) {\n            if (err instanceof EntityAlreadyExistsError) {\n                res.status(409).json({ message: err.message, description: \"User already exists\" });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @UseGuards(AuthGuard('jwt'))\n    @Get('profile')\n    async returnProfile(@Req() req:Request, @Res() res: Response) {\n        const {id,username} = z.object({\n            id:z.string({message:\"Payload invalido\"}).uuid(\"payload invalido: id nao é uuid\"),\n            username:z.string({message:\"Payload invalido\"}).min(3,\"Payload invalido: username deve ter no mínimo 3 caracteres\")\n        }).parse(req.user);\n        console.log({id,username})\n        try {\n            const profile = await this.UserService.returnProfile(id);\n\n            res.status(200).json({\n                Description: \"User profile returned successfully\",\n                profile\n            });\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @Post(\"login\")\n    async returnIdAfterLogin(@Body() body: any, @Res() res: Response) {\n        const { email, password } = z.object({\n            email: z.string().email(\"Por favor informe um email válido\"),\n            password: z.string().min(6, \"A senha deve ter no mínimo 6 caracteres\")\n        }).parse(body);\n\n        try {\n            // console.log(email+password)\n            const response = await this.UserService.returnIdAfterLogin(email, password);\n\n            console.log(response)\n\n            const token = await this.authService.generateToken({id:response.id,name:response.name});\n            console.log(token)\n            //Should generate the funcking token here;\n            res.status(200).json({\n                Description: \"User logged in successfully\",\n                token: token\n            });\n\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ Description:\"Entity Not Found Error\",message: err.message });\n            }else if(err instanceof ValidationError){\n                res.status(401).json({ Description:\"Invalid password\",message: err.message });\n            } else {\n                res.status(500).json({ message: err.message });\n            }\n        }\n    }\n\n    @Put(\"password\")\n    async updatePasswordByRecCode(@Body() body: any, @Res() res: Response) {\n        const { recString, newPassword, refCode } = z.object({\n            recString: z.string(),\n            newPassword: z.string().min(6, \"A senha deve ter no mínimo 6 caracteres\"),\n            refCode: z.string()\n        }).parse(body);\n\n        try {\n            await this.UserService.updatePasswordByRecCode(recString, newPassword, refCode);\n            res.status(200).json({ message: \"Password updated successfully\" });\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists || err instanceof ValidationError) {\n                res.status(400).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n\n    @Post(\"recover\")\n    async sendRecoveryCode(@Body() body: any, @Res() res: Response) {\n        const { email } = z.object({\n            email: z.string().email(\"Por favor informe um email válido\")\n        }).parse(body);\n\n        try {\n            const recoveryCode = await this.UserService.sendRecoveryCode(email);\n            res.status(200).json({ recoveryCode });\n        } catch (err) {\n            if (err instanceof EntityDoesNotExists) {\n                res.status(404).json({ message: err.message });\n            } else {\n                res.status(500).json({ message: \"Internal server error\" });\n            }\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { UserController } from './user.controller';\nimport { AuthService } from '../auth/auth.service';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports:[AuthModule],\n  providers: [UserService,PrismaService,AuthService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                returnIdAfterLogin\n                            \n                            \n                                    Async\n                                returnProfile\n                            \n                            \n                                    Async\n                                sendRecoveryCode\n                            \n                            \n                                    Async\n                                updatePasswordByRecCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        returnIdAfterLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnIdAfterLogin(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        returnProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    returnProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendRecoveryCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendRecoveryCode(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePasswordByRecCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePasswordByRecCode(recString: string, newPassword: string, refCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { compare, hash } from 'bcryptjs';\nimport { EntityDoesNotExists } from 'src/shared/errors/EntittyDoesNotExists.error';\nimport { EntityAlreadyExistsError } from 'src/shared/errors/EntityAlreadyExistsError.error';\nimport { ValidationError } from 'src/shared/errors/ValidationError.erro';\nimport { ADMIN_EMAIL } from 'src/shared/lib/env';\nimport { SendEmail } from 'src/shared/lib/nodemailer';\nimport { PrismaService } from 'src/shared/prisma/prisma.service';\nimport { GenValidationCode } from 'src/shared/utils/genValidCode';\nimport { splitStringAtDash } from 'src/shared/utils/SeparateCookieString';\nimport { EmailType } from 'src/types/interfaces/emailType';\n\n@Injectable()\nexport class UserService {\n    constructor(private prisma:PrismaService) {}\n\n    async create(data:Prisma.UserCreateInput) {\n        const doesTheUserAlreadyExist = await this.prisma.user.findUnique({\n            where: {\n                email: data.email\n            }\n        })\n        if(doesTheUserAlreadyExist) {\n            throw new EntityAlreadyExistsError('User',data.email);\n        }\n        const {email,name,password,appointments,created_at} = data;\n\n        const _password = await hash(password,9); //hashing the password\n        const _data:Prisma.UserCreateInput = {email,name,password:_password,appointments,created_at}\n\n        return this.prisma.user.create({data:_data});\n    }\n    async returnProfile(id:string){\n        const user = await this.prisma.user.findUnique({\n            where:{\n                id\n            },\n            select:{\n                id:false,\n                name:true,\n                email:true,\n                password:false,\n                created_at:true,\n                updated_at:true}\n        })\n\n        if(!user){\n            throw new EntityDoesNotExists('User',id);\n        }\n\n        return user\n    }\n    async returnIdAfterLogin(email:string,password:string){\n        const user = await this.prisma.user.findUnique({\n            where:{\n                email\n            },\n            select:{\n                name:true,\n                id:true,\n                password:true,\n            }\n        })\n        if(!user){\n            throw new EntityDoesNotExists('User',email);\n        }\n        const passwordMatch = await compare(password,user.password);\n        if(!passwordMatch){\n            throw new ValidationError('Invalid password');\n        }\n        \n\n        return {id:user.id,name:user.name}\n    }\n    async updatePasswordByRecCode(recString:string,newPassword:string,refCode:string){\n        const [email,ValCode] = splitStringAtDash(recString)\n\n        const user = await this.prisma.user.findUnique({\n            where:{\n                email\n            },\n            select:{\n                id:true,\n                password:true,\n            }\n        })\n        if(!user){\n            throw new EntityDoesNotExists('User',email);\n        }\n\n        if(refCode !== ValCode){\n            throw new ValidationError('Invalid code');\n        }\n\n        //Atualizando a senha\n        const updateUser = await this.prisma.user.update({\n            where:{\n                email:email\n            },\n            data:{\n                password:await hash(newPassword,9)\n            }\n        })\n\n    }\n    async sendRecoveryCode(email:string){\n        const user = await this.prisma.user.findUnique({\n            where:{\n                email\n            },\n            select:{\n                id:true,\n                password:true,\n                name:true\n            }\n        })\n        if(!user){\n            throw new EntityDoesNotExists('User',email);\n        }\n        const code = GenValidationCode()\n        const _email:EmailType = {\n            to:email,\n            subject:\"No-Reply Email de recuperação de senha\",\n            text:`  Assunto: Recuperação de Senha\n\n                    Olá, ${user.name}\n\n                    Recebemos uma solicitação para redefinir a sua senha.\n\n                    Para continuar, utilize o código abaixo:\n\n                    ${code}\n\n                    Se você não solicitou essa alteração, ignore este e-mail. O código expirará em breve por motivos de segurança.\n\n                    Atenciosamente,\n                    Equipe de suporte.\n                    Dúvidas? Entre em contato: ${ADMIN_EMAIL}\n                `\n        }\n\n        \n        const a = await SendEmail(_email);\n        console.log(a);\n        return `${email}-${code}`//Retornando o email e o código de validação no formato email-codigo\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationError.html":{"url":"classes/ValidationError.html","title":"class - ValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/errors/ValidationError.erro.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/errors/ValidationError.erro.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ValidationError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'ValidationError';\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointments/appointments.controller.ts\n            \n            controller\n            AppointmentsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/appointments/appointments.service.ts\n            \n            injectable\n            AppointmentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            interface\n            user\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwtEstrategy.service.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/errors/EntittyDoesNotExists.error.ts\n            \n            class\n            EntityDoesNotExists\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/shared/errors/EntityAlreadyExistsError.error.ts\n            \n            class\n            EntityAlreadyExistsError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/shared/errors/ValidationError.erro.ts\n            \n            class\n            ValidationError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/shared/lib/env/index.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/lib/nodemailer.ts\n            \n            function\n            SendEmail\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/shared/lib/nodemailer.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/lib/nodemailer.ts\n            \n            variable\n            transport\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/shared/utils/SeparateCookieString.ts\n            \n            function\n            splitStringAtDash\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/utils/genValidCode.ts\n            \n            function\n            GenValidationCode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/types/interfaces/emailType.ts\n            \n            interface\n            EmailType\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/types/swagger.ts\n            \n            variable\n            swaggerDocument\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^10.4.15\n        \n            @nestjs/swagger : ^11.0.7\n        \n            @prisma/client : ^6.5.0\n        \n            @types/bcryptjs : ^3.0.0\n        \n            @types/multer : ^1.4.12\n        \n            @types/nodemailer : ^6.4.17\n        \n            bcryptjs : ^3.0.2\n        \n            dotenv : ^16.4.7\n        \n            multer : ^1.4.5-lts.2\n        \n            nodemailer : ^6.10.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            prisma : ^6.5.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            zod : ^3.24.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            GenValidationCode   (src/.../genValidCode.ts)\n                        \n                        \n                            SendEmail   (src/.../nodemailer.ts)\n                        \n                        \n                            splitStringAtDash   (src/.../SeparateCookieString.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/utils/genValidCode.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GenValidationCode\n                        \n                    \n                \n            \n            \n                \nGenValidationCode()\n                \n            \n\n\n\n\n        \n    \n    src/shared/lib/nodemailer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SendEmail\n                        \n                    \n                \n            \n            \n                \nSendEmail(email: EmailType)\n                \n            \n\n\n\n\n            \n                \n                        Envia um e-mail utilizando as configurações do transporte de e-mail.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            EmailType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nObjeto contendo as informações do e-mail a ser enviado.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/shared/utils/SeparateCookieString.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        splitStringAtDash\n                        \n                    \n                \n            \n            \n                \nsplitStringAtDash(inputString: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n  A Face Detection API for acne classification using Machine Lerning and Computer Vision Techniques \n\n\n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentsModule\n\n\n\ncluster_AppointmentsModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAppointmentsModule\n\nAppointmentsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\nAppModule -->\n\nImagesService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppointmentsModule -->\n\nPrismaService->AppointmentsModule\n\n\n\nImagesModule -->\n\nPrismaService->ImagesModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nAppointmentsService\n\nAppointmentsService\n\nAppointmentsModule -->\n\nAppointmentsService->AppointmentsModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/user.html":{"url":"interfaces/user.html","title":"interface - user","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  user\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\ninterface user{id:string,name:string}\n@Injectable()\nexport class AuthService {\n  constructor(private jwtservice: JwtService) {\n    // console.log(\"jwtservice:\", this.jwtservice);\n  }\n\n  async generateToken({id,name}:user): Promise {\n    const payload = { username: name, sub:id };\n    console.log(payload)\n    return this.jwtservice.sign(payload);\n  }\n\n  async validateUser(payload: any): Promise {\n    // Aqui você pode implementar a lógica de validação do usuário\n    return { id: payload.sub, name: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            config   (src/.../nodemailer.ts)\n                        \n                        \n                            swaggerDocument   (src/.../swagger.ts)\n                        \n                        \n                            transport   (src/.../nodemailer.ts)\n                        \n                        \n                               (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/lib/nodemailer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    host: \"smtp.gmail.com\", // Padrão para Gmail, mas pode ser alterado\n    port:587, // Conversão para número e padrão 587 (STARTTLS)\n    auth: {\n        user: ADMIN_EMAIL, // Usuário do e-mail\n        pass: ADMIN_PASSWORD  // Senha ou Senha de App\n    },\n    secure:465 // SSL para porta 465, STARTTLS para outras\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transport\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createTransport({\n    host:config.host,\n    port:config.port,\n    secure:false, //define que nao havera segurança\n    auth:config.auth, \n    tls:{\n        rejectUnauthorized:false //define que nao será recusado em redes nao autorizadas\n    }\n})\n                    \n                \n\n\n        \n    \n\n    src/types/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OpenAPIObject\n\n                    \n                \n                \n                    \n                        Default value : {\n  openapi: '3.0.0',\n  info: {\n    title: 'ClearFaceAPI',\n    description: 'ClearFaceAPI - API para reconhecimento facial e análise de acne',\n    version: '1.0',\n    contact:{\n        name: 'ClearFaceAPI',\n        email: 'cibatech@gmail.com',\n    },\n    license:{\n        name: 'MIT',\n        url: 'https://opensource.org/licenses/MIT',\n    }\n  },\n  tags:[\n    {name:\"Auth\",description:\"Rotas de autenticação\"},\n    {name:\"Consultas\",description:\"Rotas de consultas\"},\n    {name:\"Imagens\",description:\"Rotas de imagens\"}\n  ],\n  paths: {\n    '/auth/register': {\n        post: {\n        summary: 'Registro de Usuário',\n        tags: ['Auth'],\n        description: 'Cria um novo usuário no sistema.',\n        requestBody: {\n            required: true,\n            content: {\n            'application/json': {\n                schema: {\n                type: 'object',\n                properties: {\n                    email: { type: 'string', format: 'email', description: 'E-mail do usuário' },\n                    name: { type: 'string', description: 'Nome do usuário', minLength: 3 },\n                    password: { type: 'string', description: 'Senha do usuário', minLength: 6 }\n                },\n                required: ['email', 'name', 'password']\n                }\n            }\n            }\n        },\n        responses: {\n            '201': {\n            description: 'Usuário registrado com sucesso',\n            content: {\n                'application/json': {\n                schema: { $ref: '#/components/schemas/User' }\n                }\n            }\n            },\n            '409': {\n            description: 'Usuário já existe',\n            content: {\n                'application/json': {\n                example: { message: 'User already exists', description: 'User already exists' }\n                }\n            }\n            },\n            '500': {\n            description: 'Erro interno no servidor',\n            content: {\n                'application/json': {\n                example: { message: 'Internal server error' }\n                }\n            }\n            }\n        }\n        }\n    },\n    '/auth/login': {\n        post: {\n        summary: 'Login de Usuário',\n        tags: ['Auth'],\n        description: 'Autentica um usuário e retorna um token JWT.',\n        requestBody: {\n            required: true,\n            content: {\n            'application/json': {\n                schema: {\n                type: 'object',\n                properties: {\n                    email: { type: 'string', format: 'email', description: 'E-mail do usuário' },\n                    password: { type: 'string', description: 'Senha do usuário', minLength: 6 }\n                },\n                required: ['email', 'password']\n                }\n            }\n            }\n        },\n        responses: {\n            '200': {\n            description: 'Login bem-sucedido',\n            content: {\n                'application/json': {\n                schema: {\n                    type: 'object',\n                    properties: {\n                    Description: { type: 'string' },\n                    token: { type: 'string', description: 'Token JWT gerado para autenticação' }\n                    }\n                }\n                }\n            }\n            },\n            '401': {\n            description: 'Senha inválida',\n            content: {\n                'application/json': {\n                example: { Description: 'Invalid password', message: 'Senha incorreta' }\n                }\n            }\n            },\n            '404': {\n            description: 'Usuário não encontrado',\n            content: {\n                'application/json': {\n                example: { Description: 'Entity Not Found Error', message: 'Usuário não encontrado' }\n                }\n            }\n            },\n            '500': {\n            description: 'Erro interno no servidor',\n            content: {\n                'application/json': {\n                example: { message: 'Internal server error' }\n                }\n            }\n            }\n        }\n        }\n    },\n    '/auth/profile': {\n        get: {\n        summary: 'Perfil do Usuário',\n        tags: ['Auth'],\n        security: [{ bearerAuth: [] }],\n        parameters:[\n            {in:\"header\",name:\"JWT Token\",required:true,description:\"Bearer Token With JWT\",schema:{type:\"string\"}}\n        ],\n        description: 'Retorna as informações do usuário autenticado.',\n        responses: {\n            '200': {\n            description: 'Perfil retornado com sucesso',\n            content: {\n                'application/json': {\n                schema: { $ref: '#/components/schemas/User' }\n                }\n            }\n            },\n            '404': {\n            description: 'Usuário não encontrado',\n            content: {\n                'application/json': {\n                example: { message: 'Usuário não encontrado' }\n                }\n            }\n            },\n            '500': {\n            description: 'Erro interno no servidor',\n            content: {\n                'application/json': {\n                example: { message: 'Internal server error' }\n                }\n            }\n            }\n        }\n        }\n    },\n    '/auth/password': {\n        put: {\n        summary: 'Alterar Senha',\n        tags: ['Auth'],\n        description: 'Atualiza a senha de um usuário com um código de recuperação.',\n        requestBody: {\n            required: true,\n            content: {\n            'application/json': {\n                schema: {\n                type: 'object',\n                properties: {\n                    recString: { type: 'string', description: 'Código de recuperação' },\n                    newPassword: { type: 'string', description: 'Nova senha', minLength: 6 },\n                    refCode: { type: 'string', description: 'Código de referência' }\n                },\n                required: ['recString', 'newPassword', 'refCode']\n                }\n            }\n            }\n        },\n        responses: {\n            '200': {\n            description: 'Senha atualizada com sucesso',\n            content: {\n                'application/json': {\n                example: { message: 'Password updated successfully' }\n                }\n            }\n            },\n            '400': {\n            description: 'Erro de validação ou entidade não encontrada',\n            content: {\n                'application/json': {\n                example: { message: 'Código de recuperação inválido' }\n                }\n            }\n            },\n            '500': {\n            description: 'Erro interno no servidor',\n            content: {\n                'application/json': {\n                example: { message: 'Internal server error' }\n                }\n            }\n            }\n        }\n        }\n    },\n    '/auth/recover': {\n    post: {\n      summary: 'Recuperação de Senha',\n      tags: ['Auth'],\n      description: 'Envia um código de recuperação para o e-mail do usuário.',\n      requestBody: {\n        required: true,\n        content: {\n          'application/json': {\n            schema: {\n              type: 'object',\n              properties: {\n                email: { type: 'string', format: 'email', description: 'E-mail do usuário' }\n              },\n              required: ['email']\n            }\n          }\n        }\n      },\n      responses: {\n        '200': {\n          description: 'Código de recuperação enviado',\n          content: {\n            'application/json': {\n              example: { recoveryCode: '123456' }\n            }\n          }\n        },\n        '404': {\n          description: 'Usuário não encontrado',\n          content: {\n            'application/json': {\n              example: { message: 'Usuário não encontrado' }\n            }\n          }\n        },\n        '500': {\n          description: 'Erro interno no servidor',\n          content: {\n            'application/json': {\n              example: { message: 'Internal server error' }\n            }\n          }\n        }\n      }\n    }\n    },\n    '/consultas': {\n          post: {\n            summary: 'Criar Consulta',\n            tags: ['Consultas'],\n            security: [{ bearerAuth: [] }], // JWT Authentication,\n            parameters:[\n              {in:\"header\",name:\"JWT Token\",required:true,description:\"Bearer Token With JWT\",schema:{type:\"string\"}}\n            ],\n            description: 'Cria uma nova consulta para o usuário autenticado.',\n            requestBody:{\n              required:true,\n              content:{\n                \"application/json\":{\n                  example:JSON.parse(`\n                      {\n    \"image_id\":\"cm8ndt8y20000ilfsohp3jiwx\"\n}\n                      `),\n                      schema:{\n                        required:[\"image_id\"],\n                        properties:{\n                          image_id:{\n                            type:\"string\",\n                            description:\"ID da imagem associada a consulta\",\n                            format:\"cuid\"\n                          }\n                        }\n                      }\n                },\n                \n              },\n\n            },\n            responses: {\n              '201': {\n                description: 'Consulta criada com sucesso',\n                content: {\n                  'application/json': {\n                    schema: { $ref: '#/components/schemas/Appointment' }\n                  }\n                }\n              },\n              '404': {\n                description: 'Usuário não encontrado',\n                content: {\n                  'application/json': {\n                    example: { message: 'Usuário não encontrado' }\n                  }\n                }\n              },\n              '500': {\n                description: 'Erro interno no servidor',\n                content: {\n                  'application/json': {\n                    example: { message: 'Internal server error' }\n                  }\n                }\n              }\n            }\n          }\n    },\n    '/consultas/user': {\n          get: {\n            summary: 'Obter Consultas do Usuário',\n            tags: ['Consultas'],\n            security: [{ bearerAuth: [] }],\n            parameters:[\n                {in:\"header\",name:\"JWT Token\",required:true,description:\"Bearer Token With JWT\",schema:{type:\"string\"}}\n            ],\n            description: 'Retorna todas as consultas do usuário autenticado.',\n            responses: {\n              '200': {\n                description: 'Lista de consultas do usuário',\n                content: {\n                  'application/json': {\n                    schema: { type: 'array', items: { $ref: '#/components/schemas/Appointment' } }\n                  }\n                }\n              },\n              '404': {\n                description: 'Usuário não encontrado',\n                content: {\n                  'application/json': {\n                    example: { message: 'Usuário não encontrado' }\n                  }\n                }\n              },\n              '500': {\n                description: 'Erro interno no servidor',\n                content: {\n                  'application/json': {\n                    example: { message: 'Internal server error' }\n                  }\n                }\n              }\n            }\n          }\n    },\n    '/consultas/{id}': {\n          get: {\n            summary: 'Obter Consulta por ID',\n            tags: ['Consultas'],\n            description: 'Busca uma consulta pelo ID.',\n            parameters: [\n              {\n                name: 'id',\n                in: 'path',\n                required: true,\n                description: 'UUID da consulta',\n                schema: { type: 'string', format: 'uuid' }\n              }\n            ],\n            responses: {\n              '200': {\n                description: 'Consulta encontrada',\n                content: {\n                  'application/json': {\n                    schema: { $ref: '#/components/schemas/Appointment' }\n                  }\n                }\n              },\n              '404': {\n                description: 'Consulta não encontrada',\n                content: {\n                  'application/json': {\n                    example: { message: 'Consulta não encontrada' }\n                  }\n                }\n              },\n              '500': {\n                description: 'Erro interno no servidor',\n                content: {\n                  'application/json': {\n                    example: { message: 'Internal server error' }\n                  }\n                }\n              }\n            }\n    }},\n    '/images': {\n        post: {\n          summary: 'Upload de Imagem',\n          tags: ['Imagens'],\n          description: 'Faz upload de uma imagem e a associa a uma consulta.',\n          requestBody: {\n            required: true,\n            content: {\n              'multipart/form-data': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    FaceImage: { \n                      type: 'string', \n                      format: 'binary', \n                      description: 'Arquivo de imagem a ser enviado'\n                    }\n                  },\n                  required: ['FaceImage']\n                }\n              }\n            }\n          },\n          responses: {\n            '201': {\n              description: 'Upload concluído com sucesso',\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      Description: { type: 'string' },\n                      image: { $ref: '#/components/schemas/Image' }\n                    }\n                  }\n                }\n              }\n            },\n            '404': {\n              description: 'Consulta não encontrada',\n              content: {\n                'application/json': {\n                  example: { message: 'Consulta não encontrada' }\n                }\n              }\n            },\n            '500': {\n              description: 'Erro interno no servidor',\n              content: {\n                'application/json': {\n                  example: { message: 'Internal server error' }\n                }\n              }\n            }\n          }\n        }\n      },\n    '/images/appointment/{appointment_id}': {\n        get: {\n          summary: 'Consultar Imagens por Consulta',\n          tags: ['Imagens'],\n          description: 'Retorna todas as imagens associadas a uma consulta.',\n          parameters: [\n            {\n              name: 'appointment_id',\n              in: 'path',\n              required: true,\n              description: 'ID da consulta',\n              schema: { type: 'string', pattern: '^[a-zA-Z0-9]{25,}$' }\n            }\n          ],\n          responses: {\n            '200': {\n              description: 'Imagens retornadas com sucesso',\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'array',\n                    items: { $ref: '#/components/schemas/Image' }\n                  }\n                }\n              }\n            },\n            '404': {\n              description: 'Consulta não encontrada',\n              content: {\n                'application/json': {\n                  example: { message: 'Consulta não encontrada' }\n                }\n              }\n            },\n            '500': {\n              description: 'Erro interno no servidor',\n              content: {\n                'application/json': {\n                  example: { message: 'Internal server error' }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n  components: {\n    securitySchemes: {\n          bearerAuth: {\n            type: 'http',\n            scheme: 'bearer',\n            bearerFormat: 'JWT'\n          }\n        },\n      \n    schemas: {\n      User: {\n        type: 'object',\n        properties: {\n            id: { type: 'string', format: 'uuid' },\n            name: { type: 'string' },\n            email: { type: 'string', format: 'email' },\n            created_at: { type: 'string', format: 'date-time' },\n            updated_at: { type: 'string', format: 'date-time' }\n        }\n        },  \n      Appointment: {\n        type: 'object',\n        properties: {\n          id: { type: 'string', format: 'uuid' },\n          resultado: { type: 'object', additionalProperties: true, nullable: true },\n          user_id: { type: 'string', format: 'uuid' },\n          image_id:{ type:'string',format:'cuid', description:\"Id da imagem associado a consulta\"},\n          user: { $ref: '#/components/schemas/User' },\n          created_at: { type: 'string', format: 'date-time' },\n          updated_at: { type: 'string', format: 'date-time' }\n        }\n      },\n      Image: {\n        title:\"Image\",\n        type: 'object',\n        properties: {\n            id: { type: 'string', format: 'uuid', description:\"ID da imagem\" },\n            url: { type: 'string', format: 'uri',description:\"URL da imagem\" },\n            created_at: { type: 'string', format: 'date-time' },\n            updated_at: { type: 'string', format: 'date-time' }\n        }\n        }\n    }\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/shared/lib/env/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n    ADMIN_EMAIL: z.string(),\n    ADMIN_PASSWORD: z.string(),\n    JWT_SECRET: z.string(),\n    PORT:z.string(),\n    HOST:z.string(),\n    JWT_EXPIRES_IN:z.string()\n}).parse(process.env)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
